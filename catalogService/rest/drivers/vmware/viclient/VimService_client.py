##################################################
# file: VimService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /home/msw/svn/zsi/zsi/scripts/wsdl2py -b --lazy /home/msw/vmware-sdk/SDK/wsdl/vim25/vimService.wsdl
# 
##################################################

from VimService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class VimServiceLocator:
    VimPort_address = "https://localhost/sdk/vimService"
    def getVimPortAddress(self):
        return VimServiceLocator.VimPort_address
    def getVimPort(self, url=None, **kw):
        return VimBindingSOAP(url or VimServiceLocator.VimPort_address, **kw)

# Methods
class VimBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: DestroyPropertyFilter
    def DestroyPropertyFilter(self, request, **kw):
        if isinstance(request, DestroyPropertyFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyPropertyFilterResponseMsg.typecode)
        return response

    # op: CreateFilter
    def CreateFilter(self, request, **kw):
        if isinstance(request, CreateFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateFilterResponseMsg.typecode)
        return response

    # op: RetrieveProperties
    def RetrieveProperties(self, request, **kw):
        if isinstance(request, RetrievePropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrievePropertiesResponseMsg.typecode)
        return response

    # op: CheckForUpdates
    def CheckForUpdates(self, request, **kw):
        if isinstance(request, CheckForUpdatesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckForUpdatesResponseMsg.typecode)
        return response

    # op: WaitForUpdates
    def WaitForUpdates(self, request, **kw):
        if isinstance(request, WaitForUpdatesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(WaitForUpdatesResponseMsg.typecode)
        return response

    # op: CancelWaitForUpdates
    def CancelWaitForUpdates(self, request, **kw):
        if isinstance(request, CancelWaitForUpdatesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelWaitForUpdatesResponseMsg.typecode)
        return response

    # op: AddAuthorizationRole
    def AddAuthorizationRole(self, request, **kw):
        if isinstance(request, AddAuthorizationRoleRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddAuthorizationRoleResponseMsg.typecode)
        return response

    # op: RemoveAuthorizationRole
    def RemoveAuthorizationRole(self, request, **kw):
        if isinstance(request, RemoveAuthorizationRoleRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAuthorizationRoleResponseMsg.typecode)
        return response

    # op: UpdateAuthorizationRole
    def UpdateAuthorizationRole(self, request, **kw):
        if isinstance(request, UpdateAuthorizationRoleRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateAuthorizationRoleResponseMsg.typecode)
        return response

    # op: MergePermissions
    def MergePermissions(self, request, **kw):
        if isinstance(request, MergePermissionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MergePermissionsResponseMsg.typecode)
        return response

    # op: RetrieveRolePermissions
    def RetrieveRolePermissions(self, request, **kw):
        if isinstance(request, RetrieveRolePermissionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveRolePermissionsResponseMsg.typecode)
        return response

    # op: RetrieveEntityPermissions
    def RetrieveEntityPermissions(self, request, **kw):
        if isinstance(request, RetrieveEntityPermissionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveEntityPermissionsResponseMsg.typecode)
        return response

    # op: RetrieveAllPermissions
    def RetrieveAllPermissions(self, request, **kw):
        if isinstance(request, RetrieveAllPermissionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveAllPermissionsResponseMsg.typecode)
        return response

    # op: SetEntityPermissions
    def SetEntityPermissions(self, request, **kw):
        if isinstance(request, SetEntityPermissionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SetEntityPermissionsResponseMsg.typecode)
        return response

    # op: ResetEntityPermissions
    def ResetEntityPermissions(self, request, **kw):
        if isinstance(request, ResetEntityPermissionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetEntityPermissionsResponseMsg.typecode)
        return response

    # op: RemoveEntityPermission
    def RemoveEntityPermission(self, request, **kw):
        if isinstance(request, RemoveEntityPermissionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveEntityPermissionResponseMsg.typecode)
        return response

    # op: ReconfigureCluster
    def ReconfigureCluster(self, request, **kw):
        if isinstance(request, ReconfigureClusterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureClusterResponseMsg.typecode)
        return response

    # op: ReconfigureCluster_Task
    def ReconfigureCluster_Task(self, request, **kw):
        if isinstance(request, ReconfigureCluster_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureCluster_TaskResponseMsg.typecode)
        return response

    # op: ApplyRecommendation
    def ApplyRecommendation(self, request, **kw):
        if isinstance(request, ApplyRecommendationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ApplyRecommendationResponseMsg.typecode)
        return response

    # op: RecommendHostsForVm
    def RecommendHostsForVm(self, request, **kw):
        if isinstance(request, RecommendHostsForVmRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RecommendHostsForVmResponseMsg.typecode)
        return response

    # op: AddHost
    def AddHost(self, request, **kw):
        if isinstance(request, AddHostRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddHostResponseMsg.typecode)
        return response

    # op: AddHost_Task
    def AddHost_Task(self, request, **kw):
        if isinstance(request, AddHost_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddHost_TaskResponseMsg.typecode)
        return response

    # op: MoveInto
    def MoveInto(self, request, **kw):
        if isinstance(request, MoveIntoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveIntoResponseMsg.typecode)
        return response

    # op: MoveInto_Task
    def MoveInto_Task(self, request, **kw):
        if isinstance(request, MoveInto_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveInto_TaskResponseMsg.typecode)
        return response

    # op: MoveHostInto
    def MoveHostInto(self, request, **kw):
        if isinstance(request, MoveHostIntoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveHostIntoResponseMsg.typecode)
        return response

    # op: MoveHostInto_Task
    def MoveHostInto_Task(self, request, **kw):
        if isinstance(request, MoveHostInto_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveHostInto_TaskResponseMsg.typecode)
        return response

    # op: RefreshRecommendation
    def RefreshRecommendation(self, request, **kw):
        if isinstance(request, RefreshRecommendationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshRecommendationResponseMsg.typecode)
        return response

    # op: ReconfigureComputeResource
    def ReconfigureComputeResource(self, request, **kw):
        if isinstance(request, ReconfigureComputeResourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureComputeResourceResponseMsg.typecode)
        return response

    # op: ReconfigureComputeResource_Task
    def ReconfigureComputeResource_Task(self, request, **kw):
        if isinstance(request, ReconfigureComputeResource_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureComputeResource_TaskResponseMsg.typecode)
        return response

    # op: AddCustomFieldDef
    def AddCustomFieldDef(self, request, **kw):
        if isinstance(request, AddCustomFieldDefRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddCustomFieldDefResponseMsg.typecode)
        return response

    # op: RemoveCustomFieldDef
    def RemoveCustomFieldDef(self, request, **kw):
        if isinstance(request, RemoveCustomFieldDefRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveCustomFieldDefResponseMsg.typecode)
        return response

    # op: RenameCustomFieldDef
    def RenameCustomFieldDef(self, request, **kw):
        if isinstance(request, RenameCustomFieldDefRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameCustomFieldDefResponseMsg.typecode)
        return response

    # op: SetField
    def SetField(self, request, **kw):
        if isinstance(request, SetFieldRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SetFieldResponseMsg.typecode)
        return response

    # op: DoesCustomizationSpecExist
    def DoesCustomizationSpecExist(self, request, **kw):
        if isinstance(request, DoesCustomizationSpecExistRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DoesCustomizationSpecExistResponseMsg.typecode)
        return response

    # op: GetCustomizationSpec
    def GetCustomizationSpec(self, request, **kw):
        if isinstance(request, GetCustomizationSpecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(GetCustomizationSpecResponseMsg.typecode)
        return response

    # op: CreateCustomizationSpec
    def CreateCustomizationSpec(self, request, **kw):
        if isinstance(request, CreateCustomizationSpecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateCustomizationSpecResponseMsg.typecode)
        return response

    # op: OverwriteCustomizationSpec
    def OverwriteCustomizationSpec(self, request, **kw):
        if isinstance(request, OverwriteCustomizationSpecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(OverwriteCustomizationSpecResponseMsg.typecode)
        return response

    # op: DeleteCustomizationSpec
    def DeleteCustomizationSpec(self, request, **kw):
        if isinstance(request, DeleteCustomizationSpecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteCustomizationSpecResponseMsg.typecode)
        return response

    # op: DuplicateCustomizationSpec
    def DuplicateCustomizationSpec(self, request, **kw):
        if isinstance(request, DuplicateCustomizationSpecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DuplicateCustomizationSpecResponseMsg.typecode)
        return response

    # op: RenameCustomizationSpec
    def RenameCustomizationSpec(self, request, **kw):
        if isinstance(request, RenameCustomizationSpecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameCustomizationSpecResponseMsg.typecode)
        return response

    # op: CustomizationSpecItemToXml
    def CustomizationSpecItemToXml(self, request, **kw):
        if isinstance(request, CustomizationSpecItemToXmlRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CustomizationSpecItemToXmlResponseMsg.typecode)
        return response

    # op: XmlToCustomizationSpecItem
    def XmlToCustomizationSpecItem(self, request, **kw):
        if isinstance(request, XmlToCustomizationSpecItemRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(XmlToCustomizationSpecItemResponseMsg.typecode)
        return response

    # op: CheckCustomizationResources
    def CheckCustomizationResources(self, request, **kw):
        if isinstance(request, CheckCustomizationResourcesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckCustomizationResourcesResponseMsg.typecode)
        return response

    # op: QueryConnectionInfo
    def QueryConnectionInfo(self, request, **kw):
        if isinstance(request, QueryConnectionInfoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConnectionInfoResponseMsg.typecode)
        return response

    # op: PowerOnMultiVM
    def PowerOnMultiVM(self, request, **kw):
        if isinstance(request, PowerOnMultiVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOnMultiVMResponseMsg.typecode)
        return response

    # op: PowerOnMultiVM_Task
    def PowerOnMultiVM_Task(self, request, **kw):
        if isinstance(request, PowerOnMultiVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOnMultiVM_TaskResponseMsg.typecode)
        return response

    # op: RenameDatastore
    def RenameDatastore(self, request, **kw):
        if isinstance(request, RenameDatastoreRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameDatastoreResponseMsg.typecode)
        return response

    # op: RefreshDatastore
    def RefreshDatastore(self, request, **kw):
        if isinstance(request, RefreshDatastoreRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshDatastoreResponseMsg.typecode)
        return response

    # op: DestroyDatastore
    def DestroyDatastore(self, request, **kw):
        if isinstance(request, DestroyDatastoreRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyDatastoreResponseMsg.typecode)
        return response

    # op: QueryDescriptions
    def QueryDescriptions(self, request, **kw):
        if isinstance(request, QueryDescriptionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDescriptionsResponseMsg.typecode)
        return response

    # op: BrowseDiagnosticLog
    def BrowseDiagnosticLog(self, request, **kw):
        if isinstance(request, BrowseDiagnosticLogRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(BrowseDiagnosticLogResponseMsg.typecode)
        return response

    # op: GenerateLogBundles
    def GenerateLogBundles(self, request, **kw):
        if isinstance(request, GenerateLogBundlesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(GenerateLogBundlesResponseMsg.typecode)
        return response

    # op: GenerateLogBundles_Task
    def GenerateLogBundles_Task(self, request, **kw):
        if isinstance(request, GenerateLogBundles_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(GenerateLogBundles_TaskResponseMsg.typecode)
        return response

    # op: QueryConfigOptionDescriptor
    def QueryConfigOptionDescriptor(self, request, **kw):
        if isinstance(request, QueryConfigOptionDescriptorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfigOptionDescriptorResponseMsg.typecode)
        return response

    # op: QueryConfigOption
    def QueryConfigOption(self, request, **kw):
        if isinstance(request, QueryConfigOptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfigOptionResponseMsg.typecode)
        return response

    # op: QueryConfigTarget
    def QueryConfigTarget(self, request, **kw):
        if isinstance(request, QueryConfigTargetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryConfigTargetResponseMsg.typecode)
        return response

    # op: setCustomValue
    def setCustomValue(self, request, **kw):
        if isinstance(request, setCustomValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(setCustomValueResponseMsg.typecode)
        return response

    # op: UnregisterExtension
    def UnregisterExtension(self, request, **kw):
        if isinstance(request, UnregisterExtensionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UnregisterExtensionResponseMsg.typecode)
        return response

    # op: FindExtension
    def FindExtension(self, request, **kw):
        if isinstance(request, FindExtensionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(FindExtensionResponseMsg.typecode)
        return response

    # op: RegisterExtension
    def RegisterExtension(self, request, **kw):
        if isinstance(request, RegisterExtensionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RegisterExtensionResponseMsg.typecode)
        return response

    # op: UpdateExtension
    def UpdateExtension(self, request, **kw):
        if isinstance(request, UpdateExtensionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateExtensionResponseMsg.typecode)
        return response

    # op: GetPublicKey
    def GetPublicKey(self, request, **kw):
        if isinstance(request, GetPublicKeyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(GetPublicKeyResponseMsg.typecode)
        return response

    # op: SetPublicKey
    def SetPublicKey(self, request, **kw):
        if isinstance(request, SetPublicKeyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SetPublicKeyResponseMsg.typecode)
        return response

    # op: MoveDatastoreFile
    def MoveDatastoreFile(self, request, **kw):
        if isinstance(request, MoveDatastoreFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveDatastoreFileResponseMsg.typecode)
        return response

    # op: MoveDatastoreFile_Task
    def MoveDatastoreFile_Task(self, request, **kw):
        if isinstance(request, MoveDatastoreFile_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveDatastoreFile_TaskResponseMsg.typecode)
        return response

    # op: CopyDatastoreFile
    def CopyDatastoreFile(self, request, **kw):
        if isinstance(request, CopyDatastoreFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CopyDatastoreFileResponseMsg.typecode)
        return response

    # op: CopyDatastoreFile_Task
    def CopyDatastoreFile_Task(self, request, **kw):
        if isinstance(request, CopyDatastoreFile_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CopyDatastoreFile_TaskResponseMsg.typecode)
        return response

    # op: DeleteDatastoreFile
    def DeleteDatastoreFile(self, request, **kw):
        if isinstance(request, DeleteDatastoreFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteDatastoreFileResponseMsg.typecode)
        return response

    # op: DeleteDatastoreFile_Task
    def DeleteDatastoreFile_Task(self, request, **kw):
        if isinstance(request, DeleteDatastoreFile_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteDatastoreFile_TaskResponseMsg.typecode)
        return response

    # op: MakeDirectory
    def MakeDirectory(self, request, **kw):
        if isinstance(request, MakeDirectoryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MakeDirectoryResponseMsg.typecode)
        return response

    # op: CreateFolder
    def CreateFolder(self, request, **kw):
        if isinstance(request, CreateFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateFolderResponseMsg.typecode)
        return response

    # op: MoveIntoFolder
    def MoveIntoFolder(self, request, **kw):
        if isinstance(request, MoveIntoFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveIntoFolderResponseMsg.typecode)
        return response

    # op: MoveIntoFolder_Task
    def MoveIntoFolder_Task(self, request, **kw):
        if isinstance(request, MoveIntoFolder_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveIntoFolder_TaskResponseMsg.typecode)
        return response

    # op: CreateVM
    def CreateVM(self, request, **kw):
        if isinstance(request, CreateVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVMResponseMsg.typecode)
        return response

    # op: CreateVM_Task
    def CreateVM_Task(self, request, **kw):
        if isinstance(request, CreateVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVM_TaskResponseMsg.typecode)
        return response

    # op: RegisterVM
    def RegisterVM(self, request, **kw):
        if isinstance(request, RegisterVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RegisterVMResponseMsg.typecode)
        return response

    # op: RegisterVM_Task
    def RegisterVM_Task(self, request, **kw):
        if isinstance(request, RegisterVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RegisterVM_TaskResponseMsg.typecode)
        return response

    # op: CreateCluster
    def CreateCluster(self, request, **kw):
        if isinstance(request, CreateClusterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateClusterResponseMsg.typecode)
        return response

    # op: CreateClusterEx
    def CreateClusterEx(self, request, **kw):
        if isinstance(request, CreateClusterExRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateClusterExResponseMsg.typecode)
        return response

    # op: AddStandaloneHost
    def AddStandaloneHost(self, request, **kw):
        if isinstance(request, AddStandaloneHostRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddStandaloneHostResponseMsg.typecode)
        return response

    # op: AddStandaloneHost_Task
    def AddStandaloneHost_Task(self, request, **kw):
        if isinstance(request, AddStandaloneHost_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddStandaloneHost_TaskResponseMsg.typecode)
        return response

    # op: CreateDatacenter
    def CreateDatacenter(self, request, **kw):
        if isinstance(request, CreateDatacenterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDatacenterResponseMsg.typecode)
        return response

    # op: UnregisterAndDestroy
    def UnregisterAndDestroy(self, request, **kw):
        if isinstance(request, UnregisterAndDestroyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UnregisterAndDestroyResponseMsg.typecode)
        return response

    # op: UnregisterAndDestroy_Task
    def UnregisterAndDestroy_Task(self, request, **kw):
        if isinstance(request, UnregisterAndDestroy_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UnregisterAndDestroy_TaskResponseMsg.typecode)
        return response

    # op: SetCollectorPageSize
    def SetCollectorPageSize(self, request, **kw):
        if isinstance(request, SetCollectorPageSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SetCollectorPageSizeResponseMsg.typecode)
        return response

    # op: RewindCollector
    def RewindCollector(self, request, **kw):
        if isinstance(request, RewindCollectorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RewindCollectorResponseMsg.typecode)
        return response

    # op: ResetCollector
    def ResetCollector(self, request, **kw):
        if isinstance(request, ResetCollectorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetCollectorResponseMsg.typecode)
        return response

    # op: DestroyCollector
    def DestroyCollector(self, request, **kw):
        if isinstance(request, DestroyCollectorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyCollectorResponseMsg.typecode)
        return response

    # op: QueryHostConnectionInfo
    def QueryHostConnectionInfo(self, request, **kw):
        if isinstance(request, QueryHostConnectionInfoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryHostConnectionInfoResponseMsg.typecode)
        return response

    # op: UpdateSystemResources
    def UpdateSystemResources(self, request, **kw):
        if isinstance(request, UpdateSystemResourcesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateSystemResourcesResponseMsg.typecode)
        return response

    # op: ReconnectHost
    def ReconnectHost(self, request, **kw):
        if isinstance(request, ReconnectHostRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconnectHostResponseMsg.typecode)
        return response

    # op: ReconnectHost_Task
    def ReconnectHost_Task(self, request, **kw):
        if isinstance(request, ReconnectHost_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconnectHost_TaskResponseMsg.typecode)
        return response

    # op: DisconnectHost
    def DisconnectHost(self, request, **kw):
        if isinstance(request, DisconnectHostRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DisconnectHostResponseMsg.typecode)
        return response

    # op: DisconnectHost_Task
    def DisconnectHost_Task(self, request, **kw):
        if isinstance(request, DisconnectHost_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DisconnectHost_TaskResponseMsg.typecode)
        return response

    # op: EnterMaintenanceMode
    def EnterMaintenanceMode(self, request, **kw):
        if isinstance(request, EnterMaintenanceModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(EnterMaintenanceModeResponseMsg.typecode)
        return response

    # op: EnterMaintenanceMode_Task
    def EnterMaintenanceMode_Task(self, request, **kw):
        if isinstance(request, EnterMaintenanceMode_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(EnterMaintenanceMode_TaskResponseMsg.typecode)
        return response

    # op: ExitMaintenanceMode
    def ExitMaintenanceMode(self, request, **kw):
        if isinstance(request, ExitMaintenanceModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ExitMaintenanceModeResponseMsg.typecode)
        return response

    # op: ExitMaintenanceMode_Task
    def ExitMaintenanceMode_Task(self, request, **kw):
        if isinstance(request, ExitMaintenanceMode_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ExitMaintenanceMode_TaskResponseMsg.typecode)
        return response

    # op: RebootHost
    def RebootHost(self, request, **kw):
        if isinstance(request, RebootHostRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RebootHostResponseMsg.typecode)
        return response

    # op: RebootHost_Task
    def RebootHost_Task(self, request, **kw):
        if isinstance(request, RebootHost_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RebootHost_TaskResponseMsg.typecode)
        return response

    # op: ShutdownHost
    def ShutdownHost(self, request, **kw):
        if isinstance(request, ShutdownHostRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ShutdownHostResponseMsg.typecode)
        return response

    # op: ShutdownHost_Task
    def ShutdownHost_Task(self, request, **kw):
        if isinstance(request, ShutdownHost_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ShutdownHost_TaskResponseMsg.typecode)
        return response

    # op: PowerDownHostToStandBy
    def PowerDownHostToStandBy(self, request, **kw):
        if isinstance(request, PowerDownHostToStandByRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerDownHostToStandByResponseMsg.typecode)
        return response

    # op: PowerDownHostToStandBy_Task
    def PowerDownHostToStandBy_Task(self, request, **kw):
        if isinstance(request, PowerDownHostToStandBy_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerDownHostToStandBy_TaskResponseMsg.typecode)
        return response

    # op: PowerUpHostFromStandBy
    def PowerUpHostFromStandBy(self, request, **kw):
        if isinstance(request, PowerUpHostFromStandByRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerUpHostFromStandByResponseMsg.typecode)
        return response

    # op: PowerUpHostFromStandBy_Task
    def PowerUpHostFromStandBy_Task(self, request, **kw):
        if isinstance(request, PowerUpHostFromStandBy_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerUpHostFromStandBy_TaskResponseMsg.typecode)
        return response

    # op: QueryMemoryOverhead
    def QueryMemoryOverhead(self, request, **kw):
        if isinstance(request, QueryMemoryOverheadRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryMemoryOverheadResponseMsg.typecode)
        return response

    # op: QueryMemoryOverheadEx
    def QueryMemoryOverheadEx(self, request, **kw):
        if isinstance(request, QueryMemoryOverheadExRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryMemoryOverheadExResponseMsg.typecode)
        return response

    # op: ReconfigureHostForDAS
    def ReconfigureHostForDAS(self, request, **kw):
        if isinstance(request, ReconfigureHostForDASRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureHostForDASResponseMsg.typecode)
        return response

    # op: ReconfigureHostForDAS_Task
    def ReconfigureHostForDAS_Task(self, request, **kw):
        if isinstance(request, ReconfigureHostForDAS_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureHostForDAS_TaskResponseMsg.typecode)
        return response

    # op: UpdateFlags
    def UpdateFlags(self, request, **kw):
        if isinstance(request, UpdateFlagsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateFlagsResponseMsg.typecode)
        return response

    # op: AcquireCimServicesTicket
    def AcquireCimServicesTicket(self, request, **kw):
        if isinstance(request, AcquireCimServicesTicketRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireCimServicesTicketResponseMsg.typecode)
        return response

    # op: QuerySupportedFeatures
    def QuerySupportedFeatures(self, request, **kw):
        if isinstance(request, QuerySupportedFeaturesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QuerySupportedFeaturesResponseMsg.typecode)
        return response

    # op: QueryLicenseSourceAvailability
    def QueryLicenseSourceAvailability(self, request, **kw):
        if isinstance(request, QueryLicenseSourceAvailabilityRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryLicenseSourceAvailabilityResponseMsg.typecode)
        return response

    # op: QueryLicenseUsage
    def QueryLicenseUsage(self, request, **kw):
        if isinstance(request, QueryLicenseUsageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryLicenseUsageResponseMsg.typecode)
        return response

    # op: SetLicenseEdition
    def SetLicenseEdition(self, request, **kw):
        if isinstance(request, SetLicenseEditionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SetLicenseEditionResponseMsg.typecode)
        return response

    # op: CheckLicenseFeature
    def CheckLicenseFeature(self, request, **kw):
        if isinstance(request, CheckLicenseFeatureRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckLicenseFeatureResponseMsg.typecode)
        return response

    # op: EnableFeature
    def EnableFeature(self, request, **kw):
        if isinstance(request, EnableFeatureRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableFeatureResponseMsg.typecode)
        return response

    # op: DisableFeature
    def DisableFeature(self, request, **kw):
        if isinstance(request, DisableFeatureRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableFeatureResponseMsg.typecode)
        return response

    # op: ConfigureLicenseSource
    def ConfigureLicenseSource(self, request, **kw):
        if isinstance(request, ConfigureLicenseSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureLicenseSourceResponseMsg.typecode)
        return response

    # op: Reload
    def Reload(self, request, **kw):
        if isinstance(request, ReloadRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReloadResponseMsg.typecode)
        return response

    # op: Rename
    def Rename(self, request, **kw):
        if isinstance(request, RenameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameResponseMsg.typecode)
        return response

    # op: Rename_Task
    def Rename_Task(self, request, **kw):
        if isinstance(request, Rename_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(Rename_TaskResponseMsg.typecode)
        return response

    # op: Destroy
    def Destroy(self, request, **kw):
        if isinstance(request, DestroyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyResponseMsg.typecode)
        return response

    # op: Destroy_Task
    def Destroy_Task(self, request, **kw):
        if isinstance(request, Destroy_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(Destroy_TaskResponseMsg.typecode)
        return response

    # op: DestroyNetwork
    def DestroyNetwork(self, request, **kw):
        if isinstance(request, DestroyNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyNetworkResponseMsg.typecode)
        return response

    # op: QueryPerfProviderSummary
    def QueryPerfProviderSummary(self, request, **kw):
        if isinstance(request, QueryPerfProviderSummaryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfProviderSummaryResponseMsg.typecode)
        return response

    # op: QueryAvailablePerfMetric
    def QueryAvailablePerfMetric(self, request, **kw):
        if isinstance(request, QueryAvailablePerfMetricRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailablePerfMetricResponseMsg.typecode)
        return response

    # op: QueryPerfCounter
    def QueryPerfCounter(self, request, **kw):
        if isinstance(request, QueryPerfCounterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfCounterResponseMsg.typecode)
        return response

    # op: QueryPerfCounterByLevel
    def QueryPerfCounterByLevel(self, request, **kw):
        if isinstance(request, QueryPerfCounterByLevelRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfCounterByLevelResponseMsg.typecode)
        return response

    # op: QueryPerf
    def QueryPerf(self, request, **kw):
        if isinstance(request, QueryPerfRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfResponseMsg.typecode)
        return response

    # op: QueryPerfComposite
    def QueryPerfComposite(self, request, **kw):
        if isinstance(request, QueryPerfCompositeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPerfCompositeResponseMsg.typecode)
        return response

    # op: CreatePerfInterval
    def CreatePerfInterval(self, request, **kw):
        if isinstance(request, CreatePerfIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreatePerfIntervalResponseMsg.typecode)
        return response

    # op: RemovePerfInterval
    def RemovePerfInterval(self, request, **kw):
        if isinstance(request, RemovePerfIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemovePerfIntervalResponseMsg.typecode)
        return response

    # op: UpdatePerfInterval
    def UpdatePerfInterval(self, request, **kw):
        if isinstance(request, UpdatePerfIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePerfIntervalResponseMsg.typecode)
        return response

    # op: UpdateConfig
    def UpdateConfig(self, request, **kw):
        if isinstance(request, UpdateConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateConfigResponseMsg.typecode)
        return response

    # op: MoveIntoResourcePool
    def MoveIntoResourcePool(self, request, **kw):
        if isinstance(request, MoveIntoResourcePoolRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveIntoResourcePoolResponseMsg.typecode)
        return response

    # op: UpdateChildResourceConfiguration
    def UpdateChildResourceConfiguration(self, request, **kw):
        if isinstance(request, UpdateChildResourceConfigurationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateChildResourceConfigurationResponseMsg.typecode)
        return response

    # op: CreateResourcePool
    def CreateResourcePool(self, request, **kw):
        if isinstance(request, CreateResourcePoolRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateResourcePoolResponseMsg.typecode)
        return response

    # op: DestroyChildren
    def DestroyChildren(self, request, **kw):
        if isinstance(request, DestroyChildrenRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyChildrenResponseMsg.typecode)
        return response

    # op: FindByUuid
    def FindByUuid(self, request, **kw):
        if isinstance(request, FindByUuidRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByUuidResponseMsg.typecode)
        return response

    # op: FindByDatastorePath
    def FindByDatastorePath(self, request, **kw):
        if isinstance(request, FindByDatastorePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByDatastorePathResponseMsg.typecode)
        return response

    # op: FindByDnsName
    def FindByDnsName(self, request, **kw):
        if isinstance(request, FindByDnsNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByDnsNameResponseMsg.typecode)
        return response

    # op: FindByIp
    def FindByIp(self, request, **kw):
        if isinstance(request, FindByIpRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByIpResponseMsg.typecode)
        return response

    # op: FindByInventoryPath
    def FindByInventoryPath(self, request, **kw):
        if isinstance(request, FindByInventoryPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(FindByInventoryPathResponseMsg.typecode)
        return response

    # op: FindChild
    def FindChild(self, request, **kw):
        if isinstance(request, FindChildRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(FindChildResponseMsg.typecode)
        return response

    # op: CurrentTime
    def CurrentTime(self, request, **kw):
        if isinstance(request, CurrentTimeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CurrentTimeResponseMsg.typecode)
        return response

    # op: RetrieveServiceContent
    def RetrieveServiceContent(self, request, **kw):
        if isinstance(request, RetrieveServiceContentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveServiceContentResponseMsg.typecode)
        return response

    # op: ValidateMigration
    def ValidateMigration(self, request, **kw):
        if isinstance(request, ValidateMigrationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ValidateMigrationResponseMsg.typecode)
        return response

    # op: QueryVMotionCompatibility
    def QueryVMotionCompatibility(self, request, **kw):
        if isinstance(request, QueryVMotionCompatibilityRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVMotionCompatibilityResponseMsg.typecode)
        return response

    # op: RetrieveProductComponents
    def RetrieveProductComponents(self, request, **kw):
        if isinstance(request, RetrieveProductComponentsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveProductComponentsResponseMsg.typecode)
        return response

    # op: UpdateServiceMessage
    def UpdateServiceMessage(self, request, **kw):
        if isinstance(request, UpdateServiceMessageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateServiceMessageResponseMsg.typecode)
        return response

    # op: Login
    def Login(self, request, **kw):
        if isinstance(request, LoginRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginResponseMsg.typecode)
        return response

    # op: LoginBySSPI
    def LoginBySSPI(self, request, **kw):
        if isinstance(request, LoginBySSPIRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(LoginBySSPIResponseMsg.typecode)
        return response

    # op: Logout
    def Logout(self, request, **kw):
        if isinstance(request, LogoutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(LogoutResponseMsg.typecode)
        return response

    # op: AcquireLocalTicket
    def AcquireLocalTicket(self, request, **kw):
        if isinstance(request, AcquireLocalTicketRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireLocalTicketResponseMsg.typecode)
        return response

    # op: TerminateSession
    def TerminateSession(self, request, **kw):
        if isinstance(request, TerminateSessionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(TerminateSessionResponseMsg.typecode)
        return response

    # op: SetLocale
    def SetLocale(self, request, **kw):
        if isinstance(request, SetLocaleRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SetLocaleResponseMsg.typecode)
        return response

    # op: ImpersonateUser
    def ImpersonateUser(self, request, **kw):
        if isinstance(request, ImpersonateUserRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ImpersonateUserResponseMsg.typecode)
        return response

    # op: SessionIsActive
    def SessionIsActive(self, request, **kw):
        if isinstance(request, SessionIsActiveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SessionIsActiveResponseMsg.typecode)
        return response

    # op: CancelTask
    def CancelTask(self, request, **kw):
        if isinstance(request, CancelTaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CancelTaskResponseMsg.typecode)
        return response

    # op: UpdateProgress
    def UpdateProgress(self, request, **kw):
        if isinstance(request, UpdateProgressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateProgressResponseMsg.typecode)
        return response

    # op: SetTaskState
    def SetTaskState(self, request, **kw):
        if isinstance(request, SetTaskStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SetTaskStateResponseMsg.typecode)
        return response

    # op: ReadNextTasks
    def ReadNextTasks(self, request, **kw):
        if isinstance(request, ReadNextTasksRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadNextTasksResponseMsg.typecode)
        return response

    # op: ReadPreviousTasks
    def ReadPreviousTasks(self, request, **kw):
        if isinstance(request, ReadPreviousTasksRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadPreviousTasksResponseMsg.typecode)
        return response

    # op: CreateCollectorForTasks
    def CreateCollectorForTasks(self, request, **kw):
        if isinstance(request, CreateCollectorForTasksRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateCollectorForTasksResponseMsg.typecode)
        return response

    # op: CreateTask
    def CreateTask(self, request, **kw):
        if isinstance(request, CreateTaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateTaskResponseMsg.typecode)
        return response

    # op: RetrieveUserGroups
    def RetrieveUserGroups(self, request, **kw):
        if isinstance(request, RetrieveUserGroupsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveUserGroupsResponseMsg.typecode)
        return response

    # op: CreateVirtualDisk
    def CreateVirtualDisk(self, request, **kw):
        if isinstance(request, CreateVirtualDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVirtualDiskResponseMsg.typecode)
        return response

    # op: CreateVirtualDisk_Task
    def CreateVirtualDisk_Task(self, request, **kw):
        if isinstance(request, CreateVirtualDisk_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: DeleteVirtualDisk
    def DeleteVirtualDisk(self, request, **kw):
        if isinstance(request, DeleteVirtualDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteVirtualDiskResponseMsg.typecode)
        return response

    # op: DeleteVirtualDisk_Task
    def DeleteVirtualDisk_Task(self, request, **kw):
        if isinstance(request, DeleteVirtualDisk_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: MoveVirtualDisk
    def MoveVirtualDisk(self, request, **kw):
        if isinstance(request, MoveVirtualDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveVirtualDiskResponseMsg.typecode)
        return response

    # op: MoveVirtualDisk_Task
    def MoveVirtualDisk_Task(self, request, **kw):
        if isinstance(request, MoveVirtualDisk_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MoveVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: CopyVirtualDisk
    def CopyVirtualDisk(self, request, **kw):
        if isinstance(request, CopyVirtualDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CopyVirtualDiskResponseMsg.typecode)
        return response

    # op: CopyVirtualDisk_Task
    def CopyVirtualDisk_Task(self, request, **kw):
        if isinstance(request, CopyVirtualDisk_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CopyVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: ExtendVirtualDisk
    def ExtendVirtualDisk(self, request, **kw):
        if isinstance(request, ExtendVirtualDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ExtendVirtualDiskResponseMsg.typecode)
        return response

    # op: ExtendVirtualDisk_Task
    def ExtendVirtualDisk_Task(self, request, **kw):
        if isinstance(request, ExtendVirtualDisk_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ExtendVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: QueryVirtualDiskFragmentation
    def QueryVirtualDiskFragmentation(self, request, **kw):
        if isinstance(request, QueryVirtualDiskFragmentationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVirtualDiskFragmentationResponseMsg.typecode)
        return response

    # op: DefragmentVirtualDisk
    def DefragmentVirtualDisk(self, request, **kw):
        if isinstance(request, DefragmentVirtualDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DefragmentVirtualDiskResponseMsg.typecode)
        return response

    # op: DefragmentVirtualDisk_Task
    def DefragmentVirtualDisk_Task(self, request, **kw):
        if isinstance(request, DefragmentVirtualDisk_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DefragmentVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: ShrinkVirtualDisk
    def ShrinkVirtualDisk(self, request, **kw):
        if isinstance(request, ShrinkVirtualDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ShrinkVirtualDiskResponseMsg.typecode)
        return response

    # op: ShrinkVirtualDisk_Task
    def ShrinkVirtualDisk_Task(self, request, **kw):
        if isinstance(request, ShrinkVirtualDisk_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ShrinkVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: InflateVirtualDisk
    def InflateVirtualDisk(self, request, **kw):
        if isinstance(request, InflateVirtualDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(InflateVirtualDiskResponseMsg.typecode)
        return response

    # op: InflateVirtualDisk_Task
    def InflateVirtualDisk_Task(self, request, **kw):
        if isinstance(request, InflateVirtualDisk_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(InflateVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: ZeroFillVirtualDisk
    def ZeroFillVirtualDisk(self, request, **kw):
        if isinstance(request, ZeroFillVirtualDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ZeroFillVirtualDiskResponseMsg.typecode)
        return response

    # op: ZeroFillVirtualDisk_Task
    def ZeroFillVirtualDisk_Task(self, request, **kw):
        if isinstance(request, ZeroFillVirtualDisk_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ZeroFillVirtualDisk_TaskResponseMsg.typecode)
        return response

    # op: SetVirtualDiskUuid
    def SetVirtualDiskUuid(self, request, **kw):
        if isinstance(request, SetVirtualDiskUuidRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SetVirtualDiskUuidResponseMsg.typecode)
        return response

    # op: QueryVirtualDiskUuid
    def QueryVirtualDiskUuid(self, request, **kw):
        if isinstance(request, QueryVirtualDiskUuidRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVirtualDiskUuidResponseMsg.typecode)
        return response

    # op: QueryVirtualDiskGeometry
    def QueryVirtualDiskGeometry(self, request, **kw):
        if isinstance(request, QueryVirtualDiskGeometryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVirtualDiskGeometryResponseMsg.typecode)
        return response

    # op: CreateSnapshot
    def CreateSnapshot(self, request, **kw):
        if isinstance(request, CreateSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateSnapshotResponseMsg.typecode)
        return response

    # op: CreateSnapshot_Task
    def CreateSnapshot_Task(self, request, **kw):
        if isinstance(request, CreateSnapshot_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RevertToCurrentSnapshot
    def RevertToCurrentSnapshot(self, request, **kw):
        if isinstance(request, RevertToCurrentSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RevertToCurrentSnapshotResponseMsg.typecode)
        return response

    # op: RevertToCurrentSnapshot_Task
    def RevertToCurrentSnapshot_Task(self, request, **kw):
        if isinstance(request, RevertToCurrentSnapshot_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RevertToCurrentSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RemoveAllSnapshots
    def RemoveAllSnapshots(self, request, **kw):
        if isinstance(request, RemoveAllSnapshotsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAllSnapshotsResponseMsg.typecode)
        return response

    # op: RemoveAllSnapshots_Task
    def RemoveAllSnapshots_Task(self, request, **kw):
        if isinstance(request, RemoveAllSnapshots_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAllSnapshots_TaskResponseMsg.typecode)
        return response

    # op: ReconfigVM
    def ReconfigVM(self, request, **kw):
        if isinstance(request, ReconfigVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigVMResponseMsg.typecode)
        return response

    # op: ReconfigVM_Task
    def ReconfigVM_Task(self, request, **kw):
        if isinstance(request, ReconfigVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigVM_TaskResponseMsg.typecode)
        return response

    # op: UpgradeVM
    def UpgradeVM(self, request, **kw):
        if isinstance(request, UpgradeVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeVMResponseMsg.typecode)
        return response

    # op: UpgradeVM_Task
    def UpgradeVM_Task(self, request, **kw):
        if isinstance(request, UpgradeVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeVM_TaskResponseMsg.typecode)
        return response

    # op: PowerOnVM
    def PowerOnVM(self, request, **kw):
        if isinstance(request, PowerOnVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOnVMResponseMsg.typecode)
        return response

    # op: PowerOnVM_Task
    def PowerOnVM_Task(self, request, **kw):
        if isinstance(request, PowerOnVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOnVM_TaskResponseMsg.typecode)
        return response

    # op: PowerOffVM
    def PowerOffVM(self, request, **kw):
        if isinstance(request, PowerOffVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOffVMResponseMsg.typecode)
        return response

    # op: PowerOffVM_Task
    def PowerOffVM_Task(self, request, **kw):
        if isinstance(request, PowerOffVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PowerOffVM_TaskResponseMsg.typecode)
        return response

    # op: SuspendVM
    def SuspendVM(self, request, **kw):
        if isinstance(request, SuspendVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SuspendVMResponseMsg.typecode)
        return response

    # op: SuspendVM_Task
    def SuspendVM_Task(self, request, **kw):
        if isinstance(request, SuspendVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SuspendVM_TaskResponseMsg.typecode)
        return response

    # op: ResetVM
    def ResetVM(self, request, **kw):
        if isinstance(request, ResetVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetVMResponseMsg.typecode)
        return response

    # op: ResetVM_Task
    def ResetVM_Task(self, request, **kw):
        if isinstance(request, ResetVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetVM_TaskResponseMsg.typecode)
        return response

    # op: ShutdownGuest
    def ShutdownGuest(self, request, **kw):
        if isinstance(request, ShutdownGuestRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ShutdownGuestResponseMsg.typecode)
        return response

    # op: RebootGuest
    def RebootGuest(self, request, **kw):
        if isinstance(request, RebootGuestRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RebootGuestResponseMsg.typecode)
        return response

    # op: StandbyGuest
    def StandbyGuest(self, request, **kw):
        if isinstance(request, StandbyGuestRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(StandbyGuestResponseMsg.typecode)
        return response

    # op: AnswerVM
    def AnswerVM(self, request, **kw):
        if isinstance(request, AnswerVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AnswerVMResponseMsg.typecode)
        return response

    # op: CustomizeVM
    def CustomizeVM(self, request, **kw):
        if isinstance(request, CustomizeVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CustomizeVMResponseMsg.typecode)
        return response

    # op: CustomizeVM_Task
    def CustomizeVM_Task(self, request, **kw):
        if isinstance(request, CustomizeVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CustomizeVM_TaskResponseMsg.typecode)
        return response

    # op: CheckCustomizationSpec
    def CheckCustomizationSpec(self, request, **kw):
        if isinstance(request, CheckCustomizationSpecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CheckCustomizationSpecResponseMsg.typecode)
        return response

    # op: MigrateVM
    def MigrateVM(self, request, **kw):
        if isinstance(request, MigrateVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MigrateVMResponseMsg.typecode)
        return response

    # op: MigrateVM_Task
    def MigrateVM_Task(self, request, **kw):
        if isinstance(request, MigrateVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MigrateVM_TaskResponseMsg.typecode)
        return response

    # op: RelocateVM
    def RelocateVM(self, request, **kw):
        if isinstance(request, RelocateVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RelocateVMResponseMsg.typecode)
        return response

    # op: RelocateVM_Task
    def RelocateVM_Task(self, request, **kw):
        if isinstance(request, RelocateVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RelocateVM_TaskResponseMsg.typecode)
        return response

    # op: CloneVM
    def CloneVM(self, request, **kw):
        if isinstance(request, CloneVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CloneVMResponseMsg.typecode)
        return response

    # op: CloneVM_Task
    def CloneVM_Task(self, request, **kw):
        if isinstance(request, CloneVM_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CloneVM_TaskResponseMsg.typecode)
        return response

    # op: MarkAsTemplate
    def MarkAsTemplate(self, request, **kw):
        if isinstance(request, MarkAsTemplateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MarkAsTemplateResponseMsg.typecode)
        return response

    # op: MarkAsVirtualMachine
    def MarkAsVirtualMachine(self, request, **kw):
        if isinstance(request, MarkAsVirtualMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MarkAsVirtualMachineResponseMsg.typecode)
        return response

    # op: UnregisterVM
    def UnregisterVM(self, request, **kw):
        if isinstance(request, UnregisterVMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UnregisterVMResponseMsg.typecode)
        return response

    # op: ResetGuestInformation
    def ResetGuestInformation(self, request, **kw):
        if isinstance(request, ResetGuestInformationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetGuestInformationResponseMsg.typecode)
        return response

    # op: MountToolsInstaller
    def MountToolsInstaller(self, request, **kw):
        if isinstance(request, MountToolsInstallerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(MountToolsInstallerResponseMsg.typecode)
        return response

    # op: UnmountToolsInstaller
    def UnmountToolsInstaller(self, request, **kw):
        if isinstance(request, UnmountToolsInstallerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UnmountToolsInstallerResponseMsg.typecode)
        return response

    # op: UpgradeTools
    def UpgradeTools(self, request, **kw):
        if isinstance(request, UpgradeToolsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeToolsResponseMsg.typecode)
        return response

    # op: UpgradeTools_Task
    def UpgradeTools_Task(self, request, **kw):
        if isinstance(request, UpgradeTools_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeTools_TaskResponseMsg.typecode)
        return response

    # op: AcquireMksTicket
    def AcquireMksTicket(self, request, **kw):
        if isinstance(request, AcquireMksTicketRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AcquireMksTicketResponseMsg.typecode)
        return response

    # op: SetScreenResolution
    def SetScreenResolution(self, request, **kw):
        if isinstance(request, SetScreenResolutionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SetScreenResolutionResponseMsg.typecode)
        return response

    # op: DefragmentAllDisks
    def DefragmentAllDisks(self, request, **kw):
        if isinstance(request, DefragmentAllDisksRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DefragmentAllDisksResponseMsg.typecode)
        return response

    # op: RemoveAlarm
    def RemoveAlarm(self, request, **kw):
        if isinstance(request, RemoveAlarmRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveAlarmResponseMsg.typecode)
        return response

    # op: ReconfigureAlarm
    def ReconfigureAlarm(self, request, **kw):
        if isinstance(request, ReconfigureAlarmRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureAlarmResponseMsg.typecode)
        return response

    # op: CreateAlarm
    def CreateAlarm(self, request, **kw):
        if isinstance(request, CreateAlarmRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateAlarmResponseMsg.typecode)
        return response

    # op: GetAlarm
    def GetAlarm(self, request, **kw):
        if isinstance(request, GetAlarmRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(GetAlarmResponseMsg.typecode)
        return response

    # op: GetAlarmState
    def GetAlarmState(self, request, **kw):
        if isinstance(request, GetAlarmStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(GetAlarmStateResponseMsg.typecode)
        return response

    # op: ReadNextEvents
    def ReadNextEvents(self, request, **kw):
        if isinstance(request, ReadNextEventsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadNextEventsResponseMsg.typecode)
        return response

    # op: ReadPreviousEvents
    def ReadPreviousEvents(self, request, **kw):
        if isinstance(request, ReadPreviousEventsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReadPreviousEventsResponseMsg.typecode)
        return response

    # op: CreateCollectorForEvents
    def CreateCollectorForEvents(self, request, **kw):
        if isinstance(request, CreateCollectorForEventsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateCollectorForEventsResponseMsg.typecode)
        return response

    # op: LogUserEvent
    def LogUserEvent(self, request, **kw):
        if isinstance(request, LogUserEventRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(LogUserEventResponseMsg.typecode)
        return response

    # op: QueryEvents
    def QueryEvents(self, request, **kw):
        if isinstance(request, QueryEventsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryEventsResponseMsg.typecode)
        return response

    # op: PostEvent
    def PostEvent(self, request, **kw):
        if isinstance(request, PostEventRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(PostEventResponseMsg.typecode)
        return response

    # op: ReconfigureAutostart
    def ReconfigureAutostart(self, request, **kw):
        if isinstance(request, ReconfigureAutostartRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureAutostartResponseMsg.typecode)
        return response

    # op: AutoStartPowerOn
    def AutoStartPowerOn(self, request, **kw):
        if isinstance(request, AutoStartPowerOnRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AutoStartPowerOnResponseMsg.typecode)
        return response

    # op: AutoStartPowerOff
    def AutoStartPowerOff(self, request, **kw):
        if isinstance(request, AutoStartPowerOffRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AutoStartPowerOffResponseMsg.typecode)
        return response

    # op: QueryBootDevices
    def QueryBootDevices(self, request, **kw):
        if isinstance(request, QueryBootDevicesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryBootDevicesResponseMsg.typecode)
        return response

    # op: UpdateBootDevice
    def UpdateBootDevice(self, request, **kw):
        if isinstance(request, UpdateBootDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateBootDeviceResponseMsg.typecode)
        return response

    # op: EnableHyperThreading
    def EnableHyperThreading(self, request, **kw):
        if isinstance(request, EnableHyperThreadingRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableHyperThreadingResponseMsg.typecode)
        return response

    # op: DisableHyperThreading
    def DisableHyperThreading(self, request, **kw):
        if isinstance(request, DisableHyperThreadingRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableHyperThreadingResponseMsg.typecode)
        return response

    # op: SearchDatastore
    def SearchDatastore(self, request, **kw):
        if isinstance(request, SearchDatastoreRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SearchDatastoreResponseMsg.typecode)
        return response

    # op: SearchDatastore_Task
    def SearchDatastore_Task(self, request, **kw):
        if isinstance(request, SearchDatastore_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SearchDatastore_TaskResponseMsg.typecode)
        return response

    # op: SearchDatastoreSubFolders
    def SearchDatastoreSubFolders(self, request, **kw):
        if isinstance(request, SearchDatastoreSubFoldersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SearchDatastoreSubFoldersResponseMsg.typecode)
        return response

    # op: SearchDatastoreSubFolders_Task
    def SearchDatastoreSubFolders_Task(self, request, **kw):
        if isinstance(request, SearchDatastoreSubFolders_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SearchDatastoreSubFolders_TaskResponseMsg.typecode)
        return response

    # op: DeleteFile
    def DeleteFile(self, request, **kw):
        if isinstance(request, DeleteFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DeleteFileResponseMsg.typecode)
        return response

    # op: UpdateLocalSwapDatastore
    def UpdateLocalSwapDatastore(self, request, **kw):
        if isinstance(request, UpdateLocalSwapDatastoreRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateLocalSwapDatastoreResponseMsg.typecode)
        return response

    # op: QueryAvailableDisksForVmfs
    def QueryAvailableDisksForVmfs(self, request, **kw):
        if isinstance(request, QueryAvailableDisksForVmfsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailableDisksForVmfsResponseMsg.typecode)
        return response

    # op: QueryVmfsDatastoreCreateOptions
    def QueryVmfsDatastoreCreateOptions(self, request, **kw):
        if isinstance(request, QueryVmfsDatastoreCreateOptionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVmfsDatastoreCreateOptionsResponseMsg.typecode)
        return response

    # op: CreateVmfsDatastore
    def CreateVmfsDatastore(self, request, **kw):
        if isinstance(request, CreateVmfsDatastoreRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateVmfsDatastoreResponseMsg.typecode)
        return response

    # op: QueryVmfsDatastoreExtendOptions
    def QueryVmfsDatastoreExtendOptions(self, request, **kw):
        if isinstance(request, QueryVmfsDatastoreExtendOptionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryVmfsDatastoreExtendOptionsResponseMsg.typecode)
        return response

    # op: ExtendVmfsDatastore
    def ExtendVmfsDatastore(self, request, **kw):
        if isinstance(request, ExtendVmfsDatastoreRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ExtendVmfsDatastoreResponseMsg.typecode)
        return response

    # op: CreateNasDatastore
    def CreateNasDatastore(self, request, **kw):
        if isinstance(request, CreateNasDatastoreRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateNasDatastoreResponseMsg.typecode)
        return response

    # op: CreateLocalDatastore
    def CreateLocalDatastore(self, request, **kw):
        if isinstance(request, CreateLocalDatastoreRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateLocalDatastoreResponseMsg.typecode)
        return response

    # op: RemoveDatastore
    def RemoveDatastore(self, request, **kw):
        if isinstance(request, RemoveDatastoreRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveDatastoreResponseMsg.typecode)
        return response

    # op: ConfigureDatastorePrincipal
    def ConfigureDatastorePrincipal(self, request, **kw):
        if isinstance(request, ConfigureDatastorePrincipalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ConfigureDatastorePrincipalResponseMsg.typecode)
        return response

    # op: UpdateDateTimeConfig
    def UpdateDateTimeConfig(self, request, **kw):
        if isinstance(request, UpdateDateTimeConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDateTimeConfigResponseMsg.typecode)
        return response

    # op: QueryAvailableTimeZones
    def QueryAvailableTimeZones(self, request, **kw):
        if isinstance(request, QueryAvailableTimeZonesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailableTimeZonesResponseMsg.typecode)
        return response

    # op: QueryDateTime
    def QueryDateTime(self, request, **kw):
        if isinstance(request, QueryDateTimeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryDateTimeResponseMsg.typecode)
        return response

    # op: UpdateDateTime
    def UpdateDateTime(self, request, **kw):
        if isinstance(request, UpdateDateTimeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDateTimeResponseMsg.typecode)
        return response

    # op: RefreshDateTimeSystem
    def RefreshDateTimeSystem(self, request, **kw):
        if isinstance(request, RefreshDateTimeSystemRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshDateTimeSystemResponseMsg.typecode)
        return response

    # op: QueryAvailablePartition
    def QueryAvailablePartition(self, request, **kw):
        if isinstance(request, QueryAvailablePartitionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryAvailablePartitionResponseMsg.typecode)
        return response

    # op: SelectActivePartition
    def SelectActivePartition(self, request, **kw):
        if isinstance(request, SelectActivePartitionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SelectActivePartitionResponseMsg.typecode)
        return response

    # op: QueryPartitionCreateOptions
    def QueryPartitionCreateOptions(self, request, **kw):
        if isinstance(request, QueryPartitionCreateOptionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPartitionCreateOptionsResponseMsg.typecode)
        return response

    # op: QueryPartitionCreateDesc
    def QueryPartitionCreateDesc(self, request, **kw):
        if isinstance(request, QueryPartitionCreateDescRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryPartitionCreateDescResponseMsg.typecode)
        return response

    # op: CreateDiagnosticPartition
    def CreateDiagnosticPartition(self, request, **kw):
        if isinstance(request, CreateDiagnosticPartitionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateDiagnosticPartitionResponseMsg.typecode)
        return response

    # op: UpdateDefaultPolicy
    def UpdateDefaultPolicy(self, request, **kw):
        if isinstance(request, UpdateDefaultPolicyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDefaultPolicyResponseMsg.typecode)
        return response

    # op: EnableRuleset
    def EnableRuleset(self, request, **kw):
        if isinstance(request, EnableRulesetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableRulesetResponseMsg.typecode)
        return response

    # op: DisableRuleset
    def DisableRuleset(self, request, **kw):
        if isinstance(request, DisableRulesetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableRulesetResponseMsg.typecode)
        return response

    # op: RefreshFirewall
    def RefreshFirewall(self, request, **kw):
        if isinstance(request, RefreshFirewallRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshFirewallResponseMsg.typecode)
        return response

    # op: ResetFirmwareToFactoryDefaults
    def ResetFirmwareToFactoryDefaults(self, request, **kw):
        if isinstance(request, ResetFirmwareToFactoryDefaultsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetFirmwareToFactoryDefaultsResponseMsg.typecode)
        return response

    # op: BackupFirmwareConfiguration
    def BackupFirmwareConfiguration(self, request, **kw):
        if isinstance(request, BackupFirmwareConfigurationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(BackupFirmwareConfigurationResponseMsg.typecode)
        return response

    # op: QueryFirmwareConfigUploadURL
    def QueryFirmwareConfigUploadURL(self, request, **kw):
        if isinstance(request, QueryFirmwareConfigUploadURLRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryFirmwareConfigUploadURLResponseMsg.typecode)
        return response

    # op: RestoreFirmwareConfiguration
    def RestoreFirmwareConfiguration(self, request, **kw):
        if isinstance(request, RestoreFirmwareConfigurationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RestoreFirmwareConfigurationResponseMsg.typecode)
        return response

    # op: RefreshHealthStatusSystem
    def RefreshHealthStatusSystem(self, request, **kw):
        if isinstance(request, RefreshHealthStatusSystemRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshHealthStatusSystemResponseMsg.typecode)
        return response

    # op: ResetSystemHealthInfo
    def ResetSystemHealthInfo(self, request, **kw):
        if isinstance(request, ResetSystemHealthInfoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetSystemHealthInfoResponseMsg.typecode)
        return response

    # op: CreateUser
    def CreateUser(self, request, **kw):
        if isinstance(request, CreateUserRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateUserResponseMsg.typecode)
        return response

    # op: UpdateUser
    def UpdateUser(self, request, **kw):
        if isinstance(request, UpdateUserRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateUserResponseMsg.typecode)
        return response

    # op: CreateGroup
    def CreateGroup(self, request, **kw):
        if isinstance(request, CreateGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateGroupResponseMsg.typecode)
        return response

    # op: RemoveUser
    def RemoveUser(self, request, **kw):
        if isinstance(request, RemoveUserRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveUserResponseMsg.typecode)
        return response

    # op: RemoveGroup
    def RemoveGroup(self, request, **kw):
        if isinstance(request, RemoveGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveGroupResponseMsg.typecode)
        return response

    # op: AssignUserToGroup
    def AssignUserToGroup(self, request, **kw):
        if isinstance(request, AssignUserToGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AssignUserToGroupResponseMsg.typecode)
        return response

    # op: UnassignUserFromGroup
    def UnassignUserFromGroup(self, request, **kw):
        if isinstance(request, UnassignUserFromGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UnassignUserFromGroupResponseMsg.typecode)
        return response

    # op: ReconfigureServiceConsoleReservation
    def ReconfigureServiceConsoleReservation(self, request, **kw):
        if isinstance(request, ReconfigureServiceConsoleReservationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureServiceConsoleReservationResponseMsg.typecode)
        return response

    # op: ReconfigureVirtualMachineReservation
    def ReconfigureVirtualMachineReservation(self, request, **kw):
        if isinstance(request, ReconfigureVirtualMachineReservationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureVirtualMachineReservationResponseMsg.typecode)
        return response

    # op: UpdateNetworkConfig
    def UpdateNetworkConfig(self, request, **kw):
        if isinstance(request, UpdateNetworkConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateNetworkConfigResponseMsg.typecode)
        return response

    # op: UpdateDnsConfig
    def UpdateDnsConfig(self, request, **kw):
        if isinstance(request, UpdateDnsConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDnsConfigResponseMsg.typecode)
        return response

    # op: UpdateIpRouteConfig
    def UpdateIpRouteConfig(self, request, **kw):
        if isinstance(request, UpdateIpRouteConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpRouteConfigResponseMsg.typecode)
        return response

    # op: UpdateConsoleIpRouteConfig
    def UpdateConsoleIpRouteConfig(self, request, **kw):
        if isinstance(request, UpdateConsoleIpRouteConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateConsoleIpRouteConfigResponseMsg.typecode)
        return response

    # op: AddVirtualSwitch
    def AddVirtualSwitch(self, request, **kw):
        if isinstance(request, AddVirtualSwitchRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddVirtualSwitchResponseMsg.typecode)
        return response

    # op: RemoveVirtualSwitch
    def RemoveVirtualSwitch(self, request, **kw):
        if isinstance(request, RemoveVirtualSwitchRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveVirtualSwitchResponseMsg.typecode)
        return response

    # op: UpdateVirtualSwitch
    def UpdateVirtualSwitch(self, request, **kw):
        if isinstance(request, UpdateVirtualSwitchRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateVirtualSwitchResponseMsg.typecode)
        return response

    # op: AddPortGroup
    def AddPortGroup(self, request, **kw):
        if isinstance(request, AddPortGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddPortGroupResponseMsg.typecode)
        return response

    # op: RemovePortGroup
    def RemovePortGroup(self, request, **kw):
        if isinstance(request, RemovePortGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemovePortGroupResponseMsg.typecode)
        return response

    # op: UpdatePortGroup
    def UpdatePortGroup(self, request, **kw):
        if isinstance(request, UpdatePortGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePortGroupResponseMsg.typecode)
        return response

    # op: UpdatePhysicalNicLinkSpeed
    def UpdatePhysicalNicLinkSpeed(self, request, **kw):
        if isinstance(request, UpdatePhysicalNicLinkSpeedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdatePhysicalNicLinkSpeedResponseMsg.typecode)
        return response

    # op: QueryNetworkHint
    def QueryNetworkHint(self, request, **kw):
        if isinstance(request, QueryNetworkHintRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryNetworkHintResponseMsg.typecode)
        return response

    # op: AddVirtualNic
    def AddVirtualNic(self, request, **kw):
        if isinstance(request, AddVirtualNicRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddVirtualNicResponseMsg.typecode)
        return response

    # op: RemoveVirtualNic
    def RemoveVirtualNic(self, request, **kw):
        if isinstance(request, RemoveVirtualNicRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveVirtualNicResponseMsg.typecode)
        return response

    # op: UpdateVirtualNic
    def UpdateVirtualNic(self, request, **kw):
        if isinstance(request, UpdateVirtualNicRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateVirtualNicResponseMsg.typecode)
        return response

    # op: AddServiceConsoleVirtualNic
    def AddServiceConsoleVirtualNic(self, request, **kw):
        if isinstance(request, AddServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: RemoveServiceConsoleVirtualNic
    def RemoveServiceConsoleVirtualNic(self, request, **kw):
        if isinstance(request, RemoveServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: UpdateServiceConsoleVirtualNic
    def UpdateServiceConsoleVirtualNic(self, request, **kw):
        if isinstance(request, UpdateServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: RestartServiceConsoleVirtualNic
    def RestartServiceConsoleVirtualNic(self, request, **kw):
        if isinstance(request, RestartServiceConsoleVirtualNicRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RestartServiceConsoleVirtualNicResponseMsg.typecode)
        return response

    # op: RefreshNetworkSystem
    def RefreshNetworkSystem(self, request, **kw):
        if isinstance(request, RefreshNetworkSystemRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshNetworkSystemResponseMsg.typecode)
        return response

    # op: ScanHostPatch
    def ScanHostPatch(self, request, **kw):
        if isinstance(request, ScanHostPatchRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ScanHostPatchResponseMsg.typecode)
        return response

    # op: ScanHostPatch_Task
    def ScanHostPatch_Task(self, request, **kw):
        if isinstance(request, ScanHostPatch_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ScanHostPatch_TaskResponseMsg.typecode)
        return response

    # op: InstallHostPatch
    def InstallHostPatch(self, request, **kw):
        if isinstance(request, InstallHostPatchRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(InstallHostPatchResponseMsg.typecode)
        return response

    # op: InstallHostPatch_Task
    def InstallHostPatch_Task(self, request, **kw):
        if isinstance(request, InstallHostPatch_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(InstallHostPatch_TaskResponseMsg.typecode)
        return response

    # op: UpdateServicePolicy
    def UpdateServicePolicy(self, request, **kw):
        if isinstance(request, UpdateServicePolicyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateServicePolicyResponseMsg.typecode)
        return response

    # op: StartService
    def StartService(self, request, **kw):
        if isinstance(request, StartServiceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(StartServiceResponseMsg.typecode)
        return response

    # op: StopService
    def StopService(self, request, **kw):
        if isinstance(request, StopServiceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(StopServiceResponseMsg.typecode)
        return response

    # op: RestartService
    def RestartService(self, request, **kw):
        if isinstance(request, RestartServiceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RestartServiceResponseMsg.typecode)
        return response

    # op: UninstallService
    def UninstallService(self, request, **kw):
        if isinstance(request, UninstallServiceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UninstallServiceResponseMsg.typecode)
        return response

    # op: RefreshServices
    def RefreshServices(self, request, **kw):
        if isinstance(request, RefreshServicesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshServicesResponseMsg.typecode)
        return response

    # op: ReconfigureSnmpAgent
    def ReconfigureSnmpAgent(self, request, **kw):
        if isinstance(request, ReconfigureSnmpAgentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureSnmpAgentResponseMsg.typecode)
        return response

    # op: SendTestNotification
    def SendTestNotification(self, request, **kw):
        if isinstance(request, SendTestNotificationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SendTestNotificationResponseMsg.typecode)
        return response

    # op: RetrieveDiskPartitionInfo
    def RetrieveDiskPartitionInfo(self, request, **kw):
        if isinstance(request, RetrieveDiskPartitionInfoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveDiskPartitionInfoResponseMsg.typecode)
        return response

    # op: ComputeDiskPartitionInfo
    def ComputeDiskPartitionInfo(self, request, **kw):
        if isinstance(request, ComputeDiskPartitionInfoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ComputeDiskPartitionInfoResponseMsg.typecode)
        return response

    # op: UpdateDiskPartitions
    def UpdateDiskPartitions(self, request, **kw):
        if isinstance(request, UpdateDiskPartitionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateDiskPartitionsResponseMsg.typecode)
        return response

    # op: FormatVmfs
    def FormatVmfs(self, request, **kw):
        if isinstance(request, FormatVmfsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(FormatVmfsResponseMsg.typecode)
        return response

    # op: RescanVmfs
    def RescanVmfs(self, request, **kw):
        if isinstance(request, RescanVmfsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RescanVmfsResponseMsg.typecode)
        return response

    # op: AttachVmfsExtent
    def AttachVmfsExtent(self, request, **kw):
        if isinstance(request, AttachVmfsExtentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AttachVmfsExtentResponseMsg.typecode)
        return response

    # op: UpgradeVmfs
    def UpgradeVmfs(self, request, **kw):
        if isinstance(request, UpgradeVmfsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeVmfsResponseMsg.typecode)
        return response

    # op: UpgradeVmLayout
    def UpgradeVmLayout(self, request, **kw):
        if isinstance(request, UpgradeVmLayoutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpgradeVmLayoutResponseMsg.typecode)
        return response

    # op: RescanHba
    def RescanHba(self, request, **kw):
        if isinstance(request, RescanHbaRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RescanHbaResponseMsg.typecode)
        return response

    # op: RescanAllHba
    def RescanAllHba(self, request, **kw):
        if isinstance(request, RescanAllHbaRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RescanAllHbaResponseMsg.typecode)
        return response

    # op: UpdateSoftwareInternetScsiEnabled
    def UpdateSoftwareInternetScsiEnabled(self, request, **kw):
        if isinstance(request, UpdateSoftwareInternetScsiEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateSoftwareInternetScsiEnabledResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiDiscoveryProperties
    def UpdateInternetScsiDiscoveryProperties(self, request, **kw):
        if isinstance(request, UpdateInternetScsiDiscoveryPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiDiscoveryPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiAuthenticationProperties
    def UpdateInternetScsiAuthenticationProperties(self, request, **kw):
        if isinstance(request, UpdateInternetScsiAuthenticationPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiAuthenticationPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiIPProperties
    def UpdateInternetScsiIPProperties(self, request, **kw):
        if isinstance(request, UpdateInternetScsiIPPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiIPPropertiesResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiName
    def UpdateInternetScsiName(self, request, **kw):
        if isinstance(request, UpdateInternetScsiNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiNameResponseMsg.typecode)
        return response

    # op: UpdateInternetScsiAlias
    def UpdateInternetScsiAlias(self, request, **kw):
        if isinstance(request, UpdateInternetScsiAliasRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateInternetScsiAliasResponseMsg.typecode)
        return response

    # op: AddInternetScsiSendTargets
    def AddInternetScsiSendTargets(self, request, **kw):
        if isinstance(request, AddInternetScsiSendTargetsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddInternetScsiSendTargetsResponseMsg.typecode)
        return response

    # op: RemoveInternetScsiSendTargets
    def RemoveInternetScsiSendTargets(self, request, **kw):
        if isinstance(request, RemoveInternetScsiSendTargetsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveInternetScsiSendTargetsResponseMsg.typecode)
        return response

    # op: AddInternetScsiStaticTargets
    def AddInternetScsiStaticTargets(self, request, **kw):
        if isinstance(request, AddInternetScsiStaticTargetsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(AddInternetScsiStaticTargetsResponseMsg.typecode)
        return response

    # op: RemoveInternetScsiStaticTargets
    def RemoveInternetScsiStaticTargets(self, request, **kw):
        if isinstance(request, RemoveInternetScsiStaticTargetsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveInternetScsiStaticTargetsResponseMsg.typecode)
        return response

    # op: EnableMultipathPath
    def EnableMultipathPath(self, request, **kw):
        if isinstance(request, EnableMultipathPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(EnableMultipathPathResponseMsg.typecode)
        return response

    # op: DisableMultipathPath
    def DisableMultipathPath(self, request, **kw):
        if isinstance(request, DisableMultipathPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DisableMultipathPathResponseMsg.typecode)
        return response

    # op: SetMultipathLunPolicy
    def SetMultipathLunPolicy(self, request, **kw):
        if isinstance(request, SetMultipathLunPolicyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SetMultipathLunPolicyResponseMsg.typecode)
        return response

    # op: RefreshStorageSystem
    def RefreshStorageSystem(self, request, **kw):
        if isinstance(request, RefreshStorageSystemRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RefreshStorageSystemResponseMsg.typecode)
        return response

    # op: UpdateIpConfig
    def UpdateIpConfig(self, request, **kw):
        if isinstance(request, UpdateIpConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateIpConfigResponseMsg.typecode)
        return response

    # op: SelectVnic
    def SelectVnic(self, request, **kw):
        if isinstance(request, SelectVnicRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SelectVnicResponseMsg.typecode)
        return response

    # op: DeselectVnic
    def DeselectVnic(self, request, **kw):
        if isinstance(request, DeselectVnicRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DeselectVnicResponseMsg.typecode)
        return response

    # op: QueryOptions
    def QueryOptions(self, request, **kw):
        if isinstance(request, QueryOptionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(QueryOptionsResponseMsg.typecode)
        return response

    # op: UpdateOptions
    def UpdateOptions(self, request, **kw):
        if isinstance(request, UpdateOptionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(UpdateOptionsResponseMsg.typecode)
        return response

    # op: RemoveScheduledTask
    def RemoveScheduledTask(self, request, **kw):
        if isinstance(request, RemoveScheduledTaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveScheduledTaskResponseMsg.typecode)
        return response

    # op: ReconfigureScheduledTask
    def ReconfigureScheduledTask(self, request, **kw):
        if isinstance(request, ReconfigureScheduledTaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ReconfigureScheduledTaskResponseMsg.typecode)
        return response

    # op: RunScheduledTask
    def RunScheduledTask(self, request, **kw):
        if isinstance(request, RunScheduledTaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RunScheduledTaskResponseMsg.typecode)
        return response

    # op: CreateScheduledTask
    def CreateScheduledTask(self, request, **kw):
        if isinstance(request, CreateScheduledTaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateScheduledTaskResponseMsg.typecode)
        return response

    # op: RetrieveEntityScheduledTask
    def RetrieveEntityScheduledTask(self, request, **kw):
        if isinstance(request, RetrieveEntityScheduledTaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RetrieveEntityScheduledTaskResponseMsg.typecode)
        return response

    # op: OpenInventoryViewFolder
    def OpenInventoryViewFolder(self, request, **kw):
        if isinstance(request, OpenInventoryViewFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(OpenInventoryViewFolderResponseMsg.typecode)
        return response

    # op: CloseInventoryViewFolder
    def CloseInventoryViewFolder(self, request, **kw):
        if isinstance(request, CloseInventoryViewFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CloseInventoryViewFolderResponseMsg.typecode)
        return response

    # op: ModifyListView
    def ModifyListView(self, request, **kw):
        if isinstance(request, ModifyListViewRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ModifyListViewResponseMsg.typecode)
        return response

    # op: ResetListView
    def ResetListView(self, request, **kw):
        if isinstance(request, ResetListViewRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetListViewResponseMsg.typecode)
        return response

    # op: ResetListViewFromView
    def ResetListViewFromView(self, request, **kw):
        if isinstance(request, ResetListViewFromViewRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ResetListViewFromViewResponseMsg.typecode)
        return response

    # op: DestroyView
    def DestroyView(self, request, **kw):
        if isinstance(request, DestroyViewRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(DestroyViewResponseMsg.typecode)
        return response

    # op: CreateInventoryView
    def CreateInventoryView(self, request, **kw):
        if isinstance(request, CreateInventoryViewRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateInventoryViewResponseMsg.typecode)
        return response

    # op: CreateContainerView
    def CreateContainerView(self, request, **kw):
        if isinstance(request, CreateContainerViewRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateContainerViewResponseMsg.typecode)
        return response

    # op: CreateListView
    def CreateListView(self, request, **kw):
        if isinstance(request, CreateListViewRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateListViewResponseMsg.typecode)
        return response

    # op: CreateListViewFromView
    def CreateListViewFromView(self, request, **kw):
        if isinstance(request, CreateListViewFromViewRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(CreateListViewFromViewResponseMsg.typecode)
        return response

    # op: RevertToSnapshot
    def RevertToSnapshot(self, request, **kw):
        if isinstance(request, RevertToSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RevertToSnapshotResponseMsg.typecode)
        return response

    # op: RevertToSnapshot_Task
    def RevertToSnapshot_Task(self, request, **kw):
        if isinstance(request, RevertToSnapshot_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RevertToSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RemoveSnapshot
    def RemoveSnapshot(self, request, **kw):
        if isinstance(request, RemoveSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveSnapshotResponseMsg.typecode)
        return response

    # op: RemoveSnapshot_Task
    def RemoveSnapshot_Task(self, request, **kw):
        if isinstance(request, RemoveSnapshot_TaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RemoveSnapshot_TaskResponseMsg.typecode)
        return response

    # op: RenameSnapshot
    def RenameSnapshot(self, request, **kw):
        if isinstance(request, RenameSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(RenameSnapshotResponseMsg.typecode)
        return response

DestroyPropertyFilterRequestMsg = GED("urn:vim25", "DestroyPropertyFilter").pyclass

DestroyPropertyFilterResponseMsg = GED("urn:vim25", "DestroyPropertyFilterResponse").pyclass

CreateFilterRequestMsg = GED("urn:vim25", "CreateFilter").pyclass

CreateFilterResponseMsg = GED("urn:vim25", "CreateFilterResponse").pyclass

RetrievePropertiesRequestMsg = GED("urn:vim25", "RetrieveProperties").pyclass

RetrievePropertiesResponseMsg = GED("urn:vim25", "RetrievePropertiesResponse").pyclass

CheckForUpdatesRequestMsg = GED("urn:vim25", "CheckForUpdates").pyclass

CheckForUpdatesResponseMsg = GED("urn:vim25", "CheckForUpdatesResponse").pyclass

WaitForUpdatesRequestMsg = GED("urn:vim25", "WaitForUpdates").pyclass

WaitForUpdatesResponseMsg = GED("urn:vim25", "WaitForUpdatesResponse").pyclass

CancelWaitForUpdatesRequestMsg = GED("urn:vim25", "CancelWaitForUpdates").pyclass

CancelWaitForUpdatesResponseMsg = GED("urn:vim25", "CancelWaitForUpdatesResponse").pyclass

AddAuthorizationRoleRequestMsg = GED("urn:vim25", "AddAuthorizationRole").pyclass

AddAuthorizationRoleResponseMsg = GED("urn:vim25", "AddAuthorizationRoleResponse").pyclass

RemoveAuthorizationRoleRequestMsg = GED("urn:vim25", "RemoveAuthorizationRole").pyclass

RemoveAuthorizationRoleResponseMsg = GED("urn:vim25", "RemoveAuthorizationRoleResponse").pyclass

UpdateAuthorizationRoleRequestMsg = GED("urn:vim25", "UpdateAuthorizationRole").pyclass

UpdateAuthorizationRoleResponseMsg = GED("urn:vim25", "UpdateAuthorizationRoleResponse").pyclass

MergePermissionsRequestMsg = GED("urn:vim25", "MergePermissions").pyclass

MergePermissionsResponseMsg = GED("urn:vim25", "MergePermissionsResponse").pyclass

RetrieveRolePermissionsRequestMsg = GED("urn:vim25", "RetrieveRolePermissions").pyclass

RetrieveRolePermissionsResponseMsg = GED("urn:vim25", "RetrieveRolePermissionsResponse").pyclass

RetrieveEntityPermissionsRequestMsg = GED("urn:vim25", "RetrieveEntityPermissions").pyclass

RetrieveEntityPermissionsResponseMsg = GED("urn:vim25", "RetrieveEntityPermissionsResponse").pyclass

RetrieveAllPermissionsRequestMsg = GED("urn:vim25", "RetrieveAllPermissions").pyclass

RetrieveAllPermissionsResponseMsg = GED("urn:vim25", "RetrieveAllPermissionsResponse").pyclass

SetEntityPermissionsRequestMsg = GED("urn:vim25", "SetEntityPermissions").pyclass

SetEntityPermissionsResponseMsg = GED("urn:vim25", "SetEntityPermissionsResponse").pyclass

ResetEntityPermissionsRequestMsg = GED("urn:vim25", "ResetEntityPermissions").pyclass

ResetEntityPermissionsResponseMsg = GED("urn:vim25", "ResetEntityPermissionsResponse").pyclass

RemoveEntityPermissionRequestMsg = GED("urn:vim25", "RemoveEntityPermission").pyclass

RemoveEntityPermissionResponseMsg = GED("urn:vim25", "RemoveEntityPermissionResponse").pyclass

ReconfigureClusterRequestMsg = GED("urn:vim25", "ReconfigureCluster").pyclass

ReconfigureClusterResponseMsg = GED("urn:vim25", "ReconfigureClusterResponse").pyclass

ReconfigureCluster_TaskRequestMsg = GED("urn:vim25", "ReconfigureCluster_Task").pyclass

ReconfigureCluster_TaskResponseMsg = GED("urn:vim25", "ReconfigureCluster_TaskResponse").pyclass

ApplyRecommendationRequestMsg = GED("urn:vim25", "ApplyRecommendation").pyclass

ApplyRecommendationResponseMsg = GED("urn:vim25", "ApplyRecommendationResponse").pyclass

RecommendHostsForVmRequestMsg = GED("urn:vim25", "RecommendHostsForVm").pyclass

RecommendHostsForVmResponseMsg = GED("urn:vim25", "RecommendHostsForVmResponse").pyclass

AddHostRequestMsg = GED("urn:vim25", "AddHost").pyclass

AddHostResponseMsg = GED("urn:vim25", "AddHostResponse").pyclass

AddHost_TaskRequestMsg = GED("urn:vim25", "AddHost_Task").pyclass

AddHost_TaskResponseMsg = GED("urn:vim25", "AddHost_TaskResponse").pyclass

MoveIntoRequestMsg = GED("urn:vim25", "MoveInto").pyclass

MoveIntoResponseMsg = GED("urn:vim25", "MoveIntoResponse").pyclass

MoveInto_TaskRequestMsg = GED("urn:vim25", "MoveInto_Task").pyclass

MoveInto_TaskResponseMsg = GED("urn:vim25", "MoveInto_TaskResponse").pyclass

MoveHostIntoRequestMsg = GED("urn:vim25", "MoveHostInto").pyclass

MoveHostIntoResponseMsg = GED("urn:vim25", "MoveHostIntoResponse").pyclass

MoveHostInto_TaskRequestMsg = GED("urn:vim25", "MoveHostInto_Task").pyclass

MoveHostInto_TaskResponseMsg = GED("urn:vim25", "MoveHostInto_TaskResponse").pyclass

RefreshRecommendationRequestMsg = GED("urn:vim25", "RefreshRecommendation").pyclass

RefreshRecommendationResponseMsg = GED("urn:vim25", "RefreshRecommendationResponse").pyclass

ReconfigureComputeResourceRequestMsg = GED("urn:vim25", "ReconfigureComputeResource").pyclass

ReconfigureComputeResourceResponseMsg = GED("urn:vim25", "ReconfigureComputeResourceResponse").pyclass

ReconfigureComputeResource_TaskRequestMsg = GED("urn:vim25", "ReconfigureComputeResource_Task").pyclass

ReconfigureComputeResource_TaskResponseMsg = GED("urn:vim25", "ReconfigureComputeResource_TaskResponse").pyclass

AddCustomFieldDefRequestMsg = GED("urn:vim25", "AddCustomFieldDef").pyclass

AddCustomFieldDefResponseMsg = GED("urn:vim25", "AddCustomFieldDefResponse").pyclass

RemoveCustomFieldDefRequestMsg = GED("urn:vim25", "RemoveCustomFieldDef").pyclass

RemoveCustomFieldDefResponseMsg = GED("urn:vim25", "RemoveCustomFieldDefResponse").pyclass

RenameCustomFieldDefRequestMsg = GED("urn:vim25", "RenameCustomFieldDef").pyclass

RenameCustomFieldDefResponseMsg = GED("urn:vim25", "RenameCustomFieldDefResponse").pyclass

SetFieldRequestMsg = GED("urn:vim25", "SetField").pyclass

SetFieldResponseMsg = GED("urn:vim25", "SetFieldResponse").pyclass

DoesCustomizationSpecExistRequestMsg = GED("urn:vim25", "DoesCustomizationSpecExist").pyclass

DoesCustomizationSpecExistResponseMsg = GED("urn:vim25", "DoesCustomizationSpecExistResponse").pyclass

GetCustomizationSpecRequestMsg = GED("urn:vim25", "GetCustomizationSpec").pyclass

GetCustomizationSpecResponseMsg = GED("urn:vim25", "GetCustomizationSpecResponse").pyclass

CreateCustomizationSpecRequestMsg = GED("urn:vim25", "CreateCustomizationSpec").pyclass

CreateCustomizationSpecResponseMsg = GED("urn:vim25", "CreateCustomizationSpecResponse").pyclass

OverwriteCustomizationSpecRequestMsg = GED("urn:vim25", "OverwriteCustomizationSpec").pyclass

OverwriteCustomizationSpecResponseMsg = GED("urn:vim25", "OverwriteCustomizationSpecResponse").pyclass

DeleteCustomizationSpecRequestMsg = GED("urn:vim25", "DeleteCustomizationSpec").pyclass

DeleteCustomizationSpecResponseMsg = GED("urn:vim25", "DeleteCustomizationSpecResponse").pyclass

DuplicateCustomizationSpecRequestMsg = GED("urn:vim25", "DuplicateCustomizationSpec").pyclass

DuplicateCustomizationSpecResponseMsg = GED("urn:vim25", "DuplicateCustomizationSpecResponse").pyclass

RenameCustomizationSpecRequestMsg = GED("urn:vim25", "RenameCustomizationSpec").pyclass

RenameCustomizationSpecResponseMsg = GED("urn:vim25", "RenameCustomizationSpecResponse").pyclass

CustomizationSpecItemToXmlRequestMsg = GED("urn:vim25", "CustomizationSpecItemToXml").pyclass

CustomizationSpecItemToXmlResponseMsg = GED("urn:vim25", "CustomizationSpecItemToXmlResponse").pyclass

XmlToCustomizationSpecItemRequestMsg = GED("urn:vim25", "XmlToCustomizationSpecItem").pyclass

XmlToCustomizationSpecItemResponseMsg = GED("urn:vim25", "XmlToCustomizationSpecItemResponse").pyclass

CheckCustomizationResourcesRequestMsg = GED("urn:vim25", "CheckCustomizationResources").pyclass

CheckCustomizationResourcesResponseMsg = GED("urn:vim25", "CheckCustomizationResourcesResponse").pyclass

QueryConnectionInfoRequestMsg = GED("urn:vim25", "QueryConnectionInfo").pyclass

QueryConnectionInfoResponseMsg = GED("urn:vim25", "QueryConnectionInfoResponse").pyclass

PowerOnMultiVMRequestMsg = GED("urn:vim25", "PowerOnMultiVM").pyclass

PowerOnMultiVMResponseMsg = GED("urn:vim25", "PowerOnMultiVMResponse").pyclass

PowerOnMultiVM_TaskRequestMsg = GED("urn:vim25", "PowerOnMultiVM_Task").pyclass

PowerOnMultiVM_TaskResponseMsg = GED("urn:vim25", "PowerOnMultiVM_TaskResponse").pyclass

RenameDatastoreRequestMsg = GED("urn:vim25", "RenameDatastore").pyclass

RenameDatastoreResponseMsg = GED("urn:vim25", "RenameDatastoreResponse").pyclass

RefreshDatastoreRequestMsg = GED("urn:vim25", "RefreshDatastore").pyclass

RefreshDatastoreResponseMsg = GED("urn:vim25", "RefreshDatastoreResponse").pyclass

DestroyDatastoreRequestMsg = GED("urn:vim25", "DestroyDatastore").pyclass

DestroyDatastoreResponseMsg = GED("urn:vim25", "DestroyDatastoreResponse").pyclass

QueryDescriptionsRequestMsg = GED("urn:vim25", "QueryDescriptions").pyclass

QueryDescriptionsResponseMsg = GED("urn:vim25", "QueryDescriptionsResponse").pyclass

BrowseDiagnosticLogRequestMsg = GED("urn:vim25", "BrowseDiagnosticLog").pyclass

BrowseDiagnosticLogResponseMsg = GED("urn:vim25", "BrowseDiagnosticLogResponse").pyclass

GenerateLogBundlesRequestMsg = GED("urn:vim25", "GenerateLogBundles").pyclass

GenerateLogBundlesResponseMsg = GED("urn:vim25", "GenerateLogBundlesResponse").pyclass

GenerateLogBundles_TaskRequestMsg = GED("urn:vim25", "GenerateLogBundles_Task").pyclass

GenerateLogBundles_TaskResponseMsg = GED("urn:vim25", "GenerateLogBundles_TaskResponse").pyclass

QueryConfigOptionDescriptorRequestMsg = GED("urn:vim25", "QueryConfigOptionDescriptor").pyclass

QueryConfigOptionDescriptorResponseMsg = GED("urn:vim25", "QueryConfigOptionDescriptorResponse").pyclass

QueryConfigOptionRequestMsg = GED("urn:vim25", "QueryConfigOption").pyclass

QueryConfigOptionResponseMsg = GED("urn:vim25", "QueryConfigOptionResponse").pyclass

QueryConfigTargetRequestMsg = GED("urn:vim25", "QueryConfigTarget").pyclass

QueryConfigTargetResponseMsg = GED("urn:vim25", "QueryConfigTargetResponse").pyclass

setCustomValueRequestMsg = GED("urn:vim25", "setCustomValue").pyclass

setCustomValueResponseMsg = GED("urn:vim25", "setCustomValueResponse").pyclass

UnregisterExtensionRequestMsg = GED("urn:vim25", "UnregisterExtension").pyclass

UnregisterExtensionResponseMsg = GED("urn:vim25", "UnregisterExtensionResponse").pyclass

FindExtensionRequestMsg = GED("urn:vim25", "FindExtension").pyclass

FindExtensionResponseMsg = GED("urn:vim25", "FindExtensionResponse").pyclass

RegisterExtensionRequestMsg = GED("urn:vim25", "RegisterExtension").pyclass

RegisterExtensionResponseMsg = GED("urn:vim25", "RegisterExtensionResponse").pyclass

UpdateExtensionRequestMsg = GED("urn:vim25", "UpdateExtension").pyclass

UpdateExtensionResponseMsg = GED("urn:vim25", "UpdateExtensionResponse").pyclass

GetPublicKeyRequestMsg = GED("urn:vim25", "GetPublicKey").pyclass

GetPublicKeyResponseMsg = GED("urn:vim25", "GetPublicKeyResponse").pyclass

SetPublicKeyRequestMsg = GED("urn:vim25", "SetPublicKey").pyclass

SetPublicKeyResponseMsg = GED("urn:vim25", "SetPublicKeyResponse").pyclass

MoveDatastoreFileRequestMsg = GED("urn:vim25", "MoveDatastoreFile").pyclass

MoveDatastoreFileResponseMsg = GED("urn:vim25", "MoveDatastoreFileResponse").pyclass

MoveDatastoreFile_TaskRequestMsg = GED("urn:vim25", "MoveDatastoreFile_Task").pyclass

MoveDatastoreFile_TaskResponseMsg = GED("urn:vim25", "MoveDatastoreFile_TaskResponse").pyclass

CopyDatastoreFileRequestMsg = GED("urn:vim25", "CopyDatastoreFile").pyclass

CopyDatastoreFileResponseMsg = GED("urn:vim25", "CopyDatastoreFileResponse").pyclass

CopyDatastoreFile_TaskRequestMsg = GED("urn:vim25", "CopyDatastoreFile_Task").pyclass

CopyDatastoreFile_TaskResponseMsg = GED("urn:vim25", "CopyDatastoreFile_TaskResponse").pyclass

DeleteDatastoreFileRequestMsg = GED("urn:vim25", "DeleteDatastoreFile").pyclass

DeleteDatastoreFileResponseMsg = GED("urn:vim25", "DeleteDatastoreFileResponse").pyclass

DeleteDatastoreFile_TaskRequestMsg = GED("urn:vim25", "DeleteDatastoreFile_Task").pyclass

DeleteDatastoreFile_TaskResponseMsg = GED("urn:vim25", "DeleteDatastoreFile_TaskResponse").pyclass

MakeDirectoryRequestMsg = GED("urn:vim25", "MakeDirectory").pyclass

MakeDirectoryResponseMsg = GED("urn:vim25", "MakeDirectoryResponse").pyclass

CreateFolderRequestMsg = GED("urn:vim25", "CreateFolder").pyclass

CreateFolderResponseMsg = GED("urn:vim25", "CreateFolderResponse").pyclass

MoveIntoFolderRequestMsg = GED("urn:vim25", "MoveIntoFolder").pyclass

MoveIntoFolderResponseMsg = GED("urn:vim25", "MoveIntoFolderResponse").pyclass

MoveIntoFolder_TaskRequestMsg = GED("urn:vim25", "MoveIntoFolder_Task").pyclass

MoveIntoFolder_TaskResponseMsg = GED("urn:vim25", "MoveIntoFolder_TaskResponse").pyclass

CreateVMRequestMsg = GED("urn:vim25", "CreateVM").pyclass

CreateVMResponseMsg = GED("urn:vim25", "CreateVMResponse").pyclass

CreateVM_TaskRequestMsg = GED("urn:vim25", "CreateVM_Task").pyclass

CreateVM_TaskResponseMsg = GED("urn:vim25", "CreateVM_TaskResponse").pyclass

RegisterVMRequestMsg = GED("urn:vim25", "RegisterVM").pyclass

RegisterVMResponseMsg = GED("urn:vim25", "RegisterVMResponse").pyclass

RegisterVM_TaskRequestMsg = GED("urn:vim25", "RegisterVM_Task").pyclass

RegisterVM_TaskResponseMsg = GED("urn:vim25", "RegisterVM_TaskResponse").pyclass

CreateClusterRequestMsg = GED("urn:vim25", "CreateCluster").pyclass

CreateClusterResponseMsg = GED("urn:vim25", "CreateClusterResponse").pyclass

CreateClusterExRequestMsg = GED("urn:vim25", "CreateClusterEx").pyclass

CreateClusterExResponseMsg = GED("urn:vim25", "CreateClusterExResponse").pyclass

AddStandaloneHostRequestMsg = GED("urn:vim25", "AddStandaloneHost").pyclass

AddStandaloneHostResponseMsg = GED("urn:vim25", "AddStandaloneHostResponse").pyclass

AddStandaloneHost_TaskRequestMsg = GED("urn:vim25", "AddStandaloneHost_Task").pyclass

AddStandaloneHost_TaskResponseMsg = GED("urn:vim25", "AddStandaloneHost_TaskResponse").pyclass

CreateDatacenterRequestMsg = GED("urn:vim25", "CreateDatacenter").pyclass

CreateDatacenterResponseMsg = GED("urn:vim25", "CreateDatacenterResponse").pyclass

UnregisterAndDestroyRequestMsg = GED("urn:vim25", "UnregisterAndDestroy").pyclass

UnregisterAndDestroyResponseMsg = GED("urn:vim25", "UnregisterAndDestroyResponse").pyclass

UnregisterAndDestroy_TaskRequestMsg = GED("urn:vim25", "UnregisterAndDestroy_Task").pyclass

UnregisterAndDestroy_TaskResponseMsg = GED("urn:vim25", "UnregisterAndDestroy_TaskResponse").pyclass

SetCollectorPageSizeRequestMsg = GED("urn:vim25", "SetCollectorPageSize").pyclass

SetCollectorPageSizeResponseMsg = GED("urn:vim25", "SetCollectorPageSizeResponse").pyclass

RewindCollectorRequestMsg = GED("urn:vim25", "RewindCollector").pyclass

RewindCollectorResponseMsg = GED("urn:vim25", "RewindCollectorResponse").pyclass

ResetCollectorRequestMsg = GED("urn:vim25", "ResetCollector").pyclass

ResetCollectorResponseMsg = GED("urn:vim25", "ResetCollectorResponse").pyclass

DestroyCollectorRequestMsg = GED("urn:vim25", "DestroyCollector").pyclass

DestroyCollectorResponseMsg = GED("urn:vim25", "DestroyCollectorResponse").pyclass

QueryHostConnectionInfoRequestMsg = GED("urn:vim25", "QueryHostConnectionInfo").pyclass

QueryHostConnectionInfoResponseMsg = GED("urn:vim25", "QueryHostConnectionInfoResponse").pyclass

UpdateSystemResourcesRequestMsg = GED("urn:vim25", "UpdateSystemResources").pyclass

UpdateSystemResourcesResponseMsg = GED("urn:vim25", "UpdateSystemResourcesResponse").pyclass

ReconnectHostRequestMsg = GED("urn:vim25", "ReconnectHost").pyclass

ReconnectHostResponseMsg = GED("urn:vim25", "ReconnectHostResponse").pyclass

ReconnectHost_TaskRequestMsg = GED("urn:vim25", "ReconnectHost_Task").pyclass

ReconnectHost_TaskResponseMsg = GED("urn:vim25", "ReconnectHost_TaskResponse").pyclass

DisconnectHostRequestMsg = GED("urn:vim25", "DisconnectHost").pyclass

DisconnectHostResponseMsg = GED("urn:vim25", "DisconnectHostResponse").pyclass

DisconnectHost_TaskRequestMsg = GED("urn:vim25", "DisconnectHost_Task").pyclass

DisconnectHost_TaskResponseMsg = GED("urn:vim25", "DisconnectHost_TaskResponse").pyclass

EnterMaintenanceModeRequestMsg = GED("urn:vim25", "EnterMaintenanceMode").pyclass

EnterMaintenanceModeResponseMsg = GED("urn:vim25", "EnterMaintenanceModeResponse").pyclass

EnterMaintenanceMode_TaskRequestMsg = GED("urn:vim25", "EnterMaintenanceMode_Task").pyclass

EnterMaintenanceMode_TaskResponseMsg = GED("urn:vim25", "EnterMaintenanceMode_TaskResponse").pyclass

ExitMaintenanceModeRequestMsg = GED("urn:vim25", "ExitMaintenanceMode").pyclass

ExitMaintenanceModeResponseMsg = GED("urn:vim25", "ExitMaintenanceModeResponse").pyclass

ExitMaintenanceMode_TaskRequestMsg = GED("urn:vim25", "ExitMaintenanceMode_Task").pyclass

ExitMaintenanceMode_TaskResponseMsg = GED("urn:vim25", "ExitMaintenanceMode_TaskResponse").pyclass

RebootHostRequestMsg = GED("urn:vim25", "RebootHost").pyclass

RebootHostResponseMsg = GED("urn:vim25", "RebootHostResponse").pyclass

RebootHost_TaskRequestMsg = GED("urn:vim25", "RebootHost_Task").pyclass

RebootHost_TaskResponseMsg = GED("urn:vim25", "RebootHost_TaskResponse").pyclass

ShutdownHostRequestMsg = GED("urn:vim25", "ShutdownHost").pyclass

ShutdownHostResponseMsg = GED("urn:vim25", "ShutdownHostResponse").pyclass

ShutdownHost_TaskRequestMsg = GED("urn:vim25", "ShutdownHost_Task").pyclass

ShutdownHost_TaskResponseMsg = GED("urn:vim25", "ShutdownHost_TaskResponse").pyclass

PowerDownHostToStandByRequestMsg = GED("urn:vim25", "PowerDownHostToStandBy").pyclass

PowerDownHostToStandByResponseMsg = GED("urn:vim25", "PowerDownHostToStandByResponse").pyclass

PowerDownHostToStandBy_TaskRequestMsg = GED("urn:vim25", "PowerDownHostToStandBy_Task").pyclass

PowerDownHostToStandBy_TaskResponseMsg = GED("urn:vim25", "PowerDownHostToStandBy_TaskResponse").pyclass

PowerUpHostFromStandByRequestMsg = GED("urn:vim25", "PowerUpHostFromStandBy").pyclass

PowerUpHostFromStandByResponseMsg = GED("urn:vim25", "PowerUpHostFromStandByResponse").pyclass

PowerUpHostFromStandBy_TaskRequestMsg = GED("urn:vim25", "PowerUpHostFromStandBy_Task").pyclass

PowerUpHostFromStandBy_TaskResponseMsg = GED("urn:vim25", "PowerUpHostFromStandBy_TaskResponse").pyclass

QueryMemoryOverheadRequestMsg = GED("urn:vim25", "QueryMemoryOverhead").pyclass

QueryMemoryOverheadResponseMsg = GED("urn:vim25", "QueryMemoryOverheadResponse").pyclass

QueryMemoryOverheadExRequestMsg = GED("urn:vim25", "QueryMemoryOverheadEx").pyclass

QueryMemoryOverheadExResponseMsg = GED("urn:vim25", "QueryMemoryOverheadExResponse").pyclass

ReconfigureHostForDASRequestMsg = GED("urn:vim25", "ReconfigureHostForDAS").pyclass

ReconfigureHostForDASResponseMsg = GED("urn:vim25", "ReconfigureHostForDASResponse").pyclass

ReconfigureHostForDAS_TaskRequestMsg = GED("urn:vim25", "ReconfigureHostForDAS_Task").pyclass

ReconfigureHostForDAS_TaskResponseMsg = GED("urn:vim25", "ReconfigureHostForDAS_TaskResponse").pyclass

UpdateFlagsRequestMsg = GED("urn:vim25", "UpdateFlags").pyclass

UpdateFlagsResponseMsg = GED("urn:vim25", "UpdateFlagsResponse").pyclass

AcquireCimServicesTicketRequestMsg = GED("urn:vim25", "AcquireCimServicesTicket").pyclass

AcquireCimServicesTicketResponseMsg = GED("urn:vim25", "AcquireCimServicesTicketResponse").pyclass

QuerySupportedFeaturesRequestMsg = GED("urn:vim25", "QuerySupportedFeatures").pyclass

QuerySupportedFeaturesResponseMsg = GED("urn:vim25", "QuerySupportedFeaturesResponse").pyclass

QueryLicenseSourceAvailabilityRequestMsg = GED("urn:vim25", "QueryLicenseSourceAvailability").pyclass

QueryLicenseSourceAvailabilityResponseMsg = GED("urn:vim25", "QueryLicenseSourceAvailabilityResponse").pyclass

QueryLicenseUsageRequestMsg = GED("urn:vim25", "QueryLicenseUsage").pyclass

QueryLicenseUsageResponseMsg = GED("urn:vim25", "QueryLicenseUsageResponse").pyclass

SetLicenseEditionRequestMsg = GED("urn:vim25", "SetLicenseEdition").pyclass

SetLicenseEditionResponseMsg = GED("urn:vim25", "SetLicenseEditionResponse").pyclass

CheckLicenseFeatureRequestMsg = GED("urn:vim25", "CheckLicenseFeature").pyclass

CheckLicenseFeatureResponseMsg = GED("urn:vim25", "CheckLicenseFeatureResponse").pyclass

EnableFeatureRequestMsg = GED("urn:vim25", "EnableFeature").pyclass

EnableFeatureResponseMsg = GED("urn:vim25", "EnableFeatureResponse").pyclass

DisableFeatureRequestMsg = GED("urn:vim25", "DisableFeature").pyclass

DisableFeatureResponseMsg = GED("urn:vim25", "DisableFeatureResponse").pyclass

ConfigureLicenseSourceRequestMsg = GED("urn:vim25", "ConfigureLicenseSource").pyclass

ConfigureLicenseSourceResponseMsg = GED("urn:vim25", "ConfigureLicenseSourceResponse").pyclass

ReloadRequestMsg = GED("urn:vim25", "Reload").pyclass

ReloadResponseMsg = GED("urn:vim25", "ReloadResponse").pyclass

RenameRequestMsg = GED("urn:vim25", "Rename").pyclass

RenameResponseMsg = GED("urn:vim25", "RenameResponse").pyclass

Rename_TaskRequestMsg = GED("urn:vim25", "Rename_Task").pyclass

Rename_TaskResponseMsg = GED("urn:vim25", "Rename_TaskResponse").pyclass

DestroyRequestMsg = GED("urn:vim25", "Destroy").pyclass

DestroyResponseMsg = GED("urn:vim25", "DestroyResponse").pyclass

Destroy_TaskRequestMsg = GED("urn:vim25", "Destroy_Task").pyclass

Destroy_TaskResponseMsg = GED("urn:vim25", "Destroy_TaskResponse").pyclass

DestroyNetworkRequestMsg = GED("urn:vim25", "DestroyNetwork").pyclass

DestroyNetworkResponseMsg = GED("urn:vim25", "DestroyNetworkResponse").pyclass

QueryPerfProviderSummaryRequestMsg = GED("urn:vim25", "QueryPerfProviderSummary").pyclass

QueryPerfProviderSummaryResponseMsg = GED("urn:vim25", "QueryPerfProviderSummaryResponse").pyclass

QueryAvailablePerfMetricRequestMsg = GED("urn:vim25", "QueryAvailablePerfMetric").pyclass

QueryAvailablePerfMetricResponseMsg = GED("urn:vim25", "QueryAvailablePerfMetricResponse").pyclass

QueryPerfCounterRequestMsg = GED("urn:vim25", "QueryPerfCounter").pyclass

QueryPerfCounterResponseMsg = GED("urn:vim25", "QueryPerfCounterResponse").pyclass

QueryPerfCounterByLevelRequestMsg = GED("urn:vim25", "QueryPerfCounterByLevel").pyclass

QueryPerfCounterByLevelResponseMsg = GED("urn:vim25", "QueryPerfCounterByLevelResponse").pyclass

QueryPerfRequestMsg = GED("urn:vim25", "QueryPerf").pyclass

QueryPerfResponseMsg = GED("urn:vim25", "QueryPerfResponse").pyclass

QueryPerfCompositeRequestMsg = GED("urn:vim25", "QueryPerfComposite").pyclass

QueryPerfCompositeResponseMsg = GED("urn:vim25", "QueryPerfCompositeResponse").pyclass

CreatePerfIntervalRequestMsg = GED("urn:vim25", "CreatePerfInterval").pyclass

CreatePerfIntervalResponseMsg = GED("urn:vim25", "CreatePerfIntervalResponse").pyclass

RemovePerfIntervalRequestMsg = GED("urn:vim25", "RemovePerfInterval").pyclass

RemovePerfIntervalResponseMsg = GED("urn:vim25", "RemovePerfIntervalResponse").pyclass

UpdatePerfIntervalRequestMsg = GED("urn:vim25", "UpdatePerfInterval").pyclass

UpdatePerfIntervalResponseMsg = GED("urn:vim25", "UpdatePerfIntervalResponse").pyclass

UpdateConfigRequestMsg = GED("urn:vim25", "UpdateConfig").pyclass

UpdateConfigResponseMsg = GED("urn:vim25", "UpdateConfigResponse").pyclass

MoveIntoResourcePoolRequestMsg = GED("urn:vim25", "MoveIntoResourcePool").pyclass

MoveIntoResourcePoolResponseMsg = GED("urn:vim25", "MoveIntoResourcePoolResponse").pyclass

UpdateChildResourceConfigurationRequestMsg = GED("urn:vim25", "UpdateChildResourceConfiguration").pyclass

UpdateChildResourceConfigurationResponseMsg = GED("urn:vim25", "UpdateChildResourceConfigurationResponse").pyclass

CreateResourcePoolRequestMsg = GED("urn:vim25", "CreateResourcePool").pyclass

CreateResourcePoolResponseMsg = GED("urn:vim25", "CreateResourcePoolResponse").pyclass

DestroyChildrenRequestMsg = GED("urn:vim25", "DestroyChildren").pyclass

DestroyChildrenResponseMsg = GED("urn:vim25", "DestroyChildrenResponse").pyclass

FindByUuidRequestMsg = GED("urn:vim25", "FindByUuid").pyclass

FindByUuidResponseMsg = GED("urn:vim25", "FindByUuidResponse").pyclass

FindByDatastorePathRequestMsg = GED("urn:vim25", "FindByDatastorePath").pyclass

FindByDatastorePathResponseMsg = GED("urn:vim25", "FindByDatastorePathResponse").pyclass

FindByDnsNameRequestMsg = GED("urn:vim25", "FindByDnsName").pyclass

FindByDnsNameResponseMsg = GED("urn:vim25", "FindByDnsNameResponse").pyclass

FindByIpRequestMsg = GED("urn:vim25", "FindByIp").pyclass

FindByIpResponseMsg = GED("urn:vim25", "FindByIpResponse").pyclass

FindByInventoryPathRequestMsg = GED("urn:vim25", "FindByInventoryPath").pyclass

FindByInventoryPathResponseMsg = GED("urn:vim25", "FindByInventoryPathResponse").pyclass

FindChildRequestMsg = GED("urn:vim25", "FindChild").pyclass

FindChildResponseMsg = GED("urn:vim25", "FindChildResponse").pyclass

CurrentTimeRequestMsg = GED("urn:vim25", "CurrentTime").pyclass

CurrentTimeResponseMsg = GED("urn:vim25", "CurrentTimeResponse").pyclass

RetrieveServiceContentRequestMsg = GED("urn:vim25", "RetrieveServiceContent").pyclass

RetrieveServiceContentResponseMsg = GED("urn:vim25", "RetrieveServiceContentResponse").pyclass

ValidateMigrationRequestMsg = GED("urn:vim25", "ValidateMigration").pyclass

ValidateMigrationResponseMsg = GED("urn:vim25", "ValidateMigrationResponse").pyclass

QueryVMotionCompatibilityRequestMsg = GED("urn:vim25", "QueryVMotionCompatibility").pyclass

QueryVMotionCompatibilityResponseMsg = GED("urn:vim25", "QueryVMotionCompatibilityResponse").pyclass

RetrieveProductComponentsRequestMsg = GED("urn:vim25", "RetrieveProductComponents").pyclass

RetrieveProductComponentsResponseMsg = GED("urn:vim25", "RetrieveProductComponentsResponse").pyclass

UpdateServiceMessageRequestMsg = GED("urn:vim25", "UpdateServiceMessage").pyclass

UpdateServiceMessageResponseMsg = GED("urn:vim25", "UpdateServiceMessageResponse").pyclass

LoginRequestMsg = GED("urn:vim25", "Login").pyclass

LoginResponseMsg = GED("urn:vim25", "LoginResponse").pyclass

LoginBySSPIRequestMsg = GED("urn:vim25", "LoginBySSPI").pyclass

LoginBySSPIResponseMsg = GED("urn:vim25", "LoginBySSPIResponse").pyclass

LogoutRequestMsg = GED("urn:vim25", "Logout").pyclass

LogoutResponseMsg = GED("urn:vim25", "LogoutResponse").pyclass

AcquireLocalTicketRequestMsg = GED("urn:vim25", "AcquireLocalTicket").pyclass

AcquireLocalTicketResponseMsg = GED("urn:vim25", "AcquireLocalTicketResponse").pyclass

TerminateSessionRequestMsg = GED("urn:vim25", "TerminateSession").pyclass

TerminateSessionResponseMsg = GED("urn:vim25", "TerminateSessionResponse").pyclass

SetLocaleRequestMsg = GED("urn:vim25", "SetLocale").pyclass

SetLocaleResponseMsg = GED("urn:vim25", "SetLocaleResponse").pyclass

ImpersonateUserRequestMsg = GED("urn:vim25", "ImpersonateUser").pyclass

ImpersonateUserResponseMsg = GED("urn:vim25", "ImpersonateUserResponse").pyclass

SessionIsActiveRequestMsg = GED("urn:vim25", "SessionIsActive").pyclass

SessionIsActiveResponseMsg = GED("urn:vim25", "SessionIsActiveResponse").pyclass

CancelTaskRequestMsg = GED("urn:vim25", "CancelTask").pyclass

CancelTaskResponseMsg = GED("urn:vim25", "CancelTaskResponse").pyclass

UpdateProgressRequestMsg = GED("urn:vim25", "UpdateProgress").pyclass

UpdateProgressResponseMsg = GED("urn:vim25", "UpdateProgressResponse").pyclass

SetTaskStateRequestMsg = GED("urn:vim25", "SetTaskState").pyclass

SetTaskStateResponseMsg = GED("urn:vim25", "SetTaskStateResponse").pyclass

ReadNextTasksRequestMsg = GED("urn:vim25", "ReadNextTasks").pyclass

ReadNextTasksResponseMsg = GED("urn:vim25", "ReadNextTasksResponse").pyclass

ReadPreviousTasksRequestMsg = GED("urn:vim25", "ReadPreviousTasks").pyclass

ReadPreviousTasksResponseMsg = GED("urn:vim25", "ReadPreviousTasksResponse").pyclass

CreateCollectorForTasksRequestMsg = GED("urn:vim25", "CreateCollectorForTasks").pyclass

CreateCollectorForTasksResponseMsg = GED("urn:vim25", "CreateCollectorForTasksResponse").pyclass

CreateTaskRequestMsg = GED("urn:vim25", "CreateTask").pyclass

CreateTaskResponseMsg = GED("urn:vim25", "CreateTaskResponse").pyclass

RetrieveUserGroupsRequestMsg = GED("urn:vim25", "RetrieveUserGroups").pyclass

RetrieveUserGroupsResponseMsg = GED("urn:vim25", "RetrieveUserGroupsResponse").pyclass

CreateVirtualDiskRequestMsg = GED("urn:vim25", "CreateVirtualDisk").pyclass

CreateVirtualDiskResponseMsg = GED("urn:vim25", "CreateVirtualDiskResponse").pyclass

CreateVirtualDisk_TaskRequestMsg = GED("urn:vim25", "CreateVirtualDisk_Task").pyclass

CreateVirtualDisk_TaskResponseMsg = GED("urn:vim25", "CreateVirtualDisk_TaskResponse").pyclass

DeleteVirtualDiskRequestMsg = GED("urn:vim25", "DeleteVirtualDisk").pyclass

DeleteVirtualDiskResponseMsg = GED("urn:vim25", "DeleteVirtualDiskResponse").pyclass

DeleteVirtualDisk_TaskRequestMsg = GED("urn:vim25", "DeleteVirtualDisk_Task").pyclass

DeleteVirtualDisk_TaskResponseMsg = GED("urn:vim25", "DeleteVirtualDisk_TaskResponse").pyclass

MoveVirtualDiskRequestMsg = GED("urn:vim25", "MoveVirtualDisk").pyclass

MoveVirtualDiskResponseMsg = GED("urn:vim25", "MoveVirtualDiskResponse").pyclass

MoveVirtualDisk_TaskRequestMsg = GED("urn:vim25", "MoveVirtualDisk_Task").pyclass

MoveVirtualDisk_TaskResponseMsg = GED("urn:vim25", "MoveVirtualDisk_TaskResponse").pyclass

CopyVirtualDiskRequestMsg = GED("urn:vim25", "CopyVirtualDisk").pyclass

CopyVirtualDiskResponseMsg = GED("urn:vim25", "CopyVirtualDiskResponse").pyclass

CopyVirtualDisk_TaskRequestMsg = GED("urn:vim25", "CopyVirtualDisk_Task").pyclass

CopyVirtualDisk_TaskResponseMsg = GED("urn:vim25", "CopyVirtualDisk_TaskResponse").pyclass

ExtendVirtualDiskRequestMsg = GED("urn:vim25", "ExtendVirtualDisk").pyclass

ExtendVirtualDiskResponseMsg = GED("urn:vim25", "ExtendVirtualDiskResponse").pyclass

ExtendVirtualDisk_TaskRequestMsg = GED("urn:vim25", "ExtendVirtualDisk_Task").pyclass

ExtendVirtualDisk_TaskResponseMsg = GED("urn:vim25", "ExtendVirtualDisk_TaskResponse").pyclass

QueryVirtualDiskFragmentationRequestMsg = GED("urn:vim25", "QueryVirtualDiskFragmentation").pyclass

QueryVirtualDiskFragmentationResponseMsg = GED("urn:vim25", "QueryVirtualDiskFragmentationResponse").pyclass

DefragmentVirtualDiskRequestMsg = GED("urn:vim25", "DefragmentVirtualDisk").pyclass

DefragmentVirtualDiskResponseMsg = GED("urn:vim25", "DefragmentVirtualDiskResponse").pyclass

DefragmentVirtualDisk_TaskRequestMsg = GED("urn:vim25", "DefragmentVirtualDisk_Task").pyclass

DefragmentVirtualDisk_TaskResponseMsg = GED("urn:vim25", "DefragmentVirtualDisk_TaskResponse").pyclass

ShrinkVirtualDiskRequestMsg = GED("urn:vim25", "ShrinkVirtualDisk").pyclass

ShrinkVirtualDiskResponseMsg = GED("urn:vim25", "ShrinkVirtualDiskResponse").pyclass

ShrinkVirtualDisk_TaskRequestMsg = GED("urn:vim25", "ShrinkVirtualDisk_Task").pyclass

ShrinkVirtualDisk_TaskResponseMsg = GED("urn:vim25", "ShrinkVirtualDisk_TaskResponse").pyclass

InflateVirtualDiskRequestMsg = GED("urn:vim25", "InflateVirtualDisk").pyclass

InflateVirtualDiskResponseMsg = GED("urn:vim25", "InflateVirtualDiskResponse").pyclass

InflateVirtualDisk_TaskRequestMsg = GED("urn:vim25", "InflateVirtualDisk_Task").pyclass

InflateVirtualDisk_TaskResponseMsg = GED("urn:vim25", "InflateVirtualDisk_TaskResponse").pyclass

ZeroFillVirtualDiskRequestMsg = GED("urn:vim25", "ZeroFillVirtualDisk").pyclass

ZeroFillVirtualDiskResponseMsg = GED("urn:vim25", "ZeroFillVirtualDiskResponse").pyclass

ZeroFillVirtualDisk_TaskRequestMsg = GED("urn:vim25", "ZeroFillVirtualDisk_Task").pyclass

ZeroFillVirtualDisk_TaskResponseMsg = GED("urn:vim25", "ZeroFillVirtualDisk_TaskResponse").pyclass

SetVirtualDiskUuidRequestMsg = GED("urn:vim25", "SetVirtualDiskUuid").pyclass

SetVirtualDiskUuidResponseMsg = GED("urn:vim25", "SetVirtualDiskUuidResponse").pyclass

QueryVirtualDiskUuidRequestMsg = GED("urn:vim25", "QueryVirtualDiskUuid").pyclass

QueryVirtualDiskUuidResponseMsg = GED("urn:vim25", "QueryVirtualDiskUuidResponse").pyclass

QueryVirtualDiskGeometryRequestMsg = GED("urn:vim25", "QueryVirtualDiskGeometry").pyclass

QueryVirtualDiskGeometryResponseMsg = GED("urn:vim25", "QueryVirtualDiskGeometryResponse").pyclass

CreateSnapshotRequestMsg = GED("urn:vim25", "CreateSnapshot").pyclass

CreateSnapshotResponseMsg = GED("urn:vim25", "CreateSnapshotResponse").pyclass

CreateSnapshot_TaskRequestMsg = GED("urn:vim25", "CreateSnapshot_Task").pyclass

CreateSnapshot_TaskResponseMsg = GED("urn:vim25", "CreateSnapshot_TaskResponse").pyclass

RevertToCurrentSnapshotRequestMsg = GED("urn:vim25", "RevertToCurrentSnapshot").pyclass

RevertToCurrentSnapshotResponseMsg = GED("urn:vim25", "RevertToCurrentSnapshotResponse").pyclass

RevertToCurrentSnapshot_TaskRequestMsg = GED("urn:vim25", "RevertToCurrentSnapshot_Task").pyclass

RevertToCurrentSnapshot_TaskResponseMsg = GED("urn:vim25", "RevertToCurrentSnapshot_TaskResponse").pyclass

RemoveAllSnapshotsRequestMsg = GED("urn:vim25", "RemoveAllSnapshots").pyclass

RemoveAllSnapshotsResponseMsg = GED("urn:vim25", "RemoveAllSnapshotsResponse").pyclass

RemoveAllSnapshots_TaskRequestMsg = GED("urn:vim25", "RemoveAllSnapshots_Task").pyclass

RemoveAllSnapshots_TaskResponseMsg = GED("urn:vim25", "RemoveAllSnapshots_TaskResponse").pyclass

ReconfigVMRequestMsg = GED("urn:vim25", "ReconfigVM").pyclass

ReconfigVMResponseMsg = GED("urn:vim25", "ReconfigVMResponse").pyclass

ReconfigVM_TaskRequestMsg = GED("urn:vim25", "ReconfigVM_Task").pyclass

ReconfigVM_TaskResponseMsg = GED("urn:vim25", "ReconfigVM_TaskResponse").pyclass

UpgradeVMRequestMsg = GED("urn:vim25", "UpgradeVM").pyclass

UpgradeVMResponseMsg = GED("urn:vim25", "UpgradeVMResponse").pyclass

UpgradeVM_TaskRequestMsg = GED("urn:vim25", "UpgradeVM_Task").pyclass

UpgradeVM_TaskResponseMsg = GED("urn:vim25", "UpgradeVM_TaskResponse").pyclass

PowerOnVMRequestMsg = GED("urn:vim25", "PowerOnVM").pyclass

PowerOnVMResponseMsg = GED("urn:vim25", "PowerOnVMResponse").pyclass

PowerOnVM_TaskRequestMsg = GED("urn:vim25", "PowerOnVM_Task").pyclass

PowerOnVM_TaskResponseMsg = GED("urn:vim25", "PowerOnVM_TaskResponse").pyclass

PowerOffVMRequestMsg = GED("urn:vim25", "PowerOffVM").pyclass

PowerOffVMResponseMsg = GED("urn:vim25", "PowerOffVMResponse").pyclass

PowerOffVM_TaskRequestMsg = GED("urn:vim25", "PowerOffVM_Task").pyclass

PowerOffVM_TaskResponseMsg = GED("urn:vim25", "PowerOffVM_TaskResponse").pyclass

SuspendVMRequestMsg = GED("urn:vim25", "SuspendVM").pyclass

SuspendVMResponseMsg = GED("urn:vim25", "SuspendVMResponse").pyclass

SuspendVM_TaskRequestMsg = GED("urn:vim25", "SuspendVM_Task").pyclass

SuspendVM_TaskResponseMsg = GED("urn:vim25", "SuspendVM_TaskResponse").pyclass

ResetVMRequestMsg = GED("urn:vim25", "ResetVM").pyclass

ResetVMResponseMsg = GED("urn:vim25", "ResetVMResponse").pyclass

ResetVM_TaskRequestMsg = GED("urn:vim25", "ResetVM_Task").pyclass

ResetVM_TaskResponseMsg = GED("urn:vim25", "ResetVM_TaskResponse").pyclass

ShutdownGuestRequestMsg = GED("urn:vim25", "ShutdownGuest").pyclass

ShutdownGuestResponseMsg = GED("urn:vim25", "ShutdownGuestResponse").pyclass

RebootGuestRequestMsg = GED("urn:vim25", "RebootGuest").pyclass

RebootGuestResponseMsg = GED("urn:vim25", "RebootGuestResponse").pyclass

StandbyGuestRequestMsg = GED("urn:vim25", "StandbyGuest").pyclass

StandbyGuestResponseMsg = GED("urn:vim25", "StandbyGuestResponse").pyclass

AnswerVMRequestMsg = GED("urn:vim25", "AnswerVM").pyclass

AnswerVMResponseMsg = GED("urn:vim25", "AnswerVMResponse").pyclass

CustomizeVMRequestMsg = GED("urn:vim25", "CustomizeVM").pyclass

CustomizeVMResponseMsg = GED("urn:vim25", "CustomizeVMResponse").pyclass

CustomizeVM_TaskRequestMsg = GED("urn:vim25", "CustomizeVM_Task").pyclass

CustomizeVM_TaskResponseMsg = GED("urn:vim25", "CustomizeVM_TaskResponse").pyclass

CheckCustomizationSpecRequestMsg = GED("urn:vim25", "CheckCustomizationSpec").pyclass

CheckCustomizationSpecResponseMsg = GED("urn:vim25", "CheckCustomizationSpecResponse").pyclass

MigrateVMRequestMsg = GED("urn:vim25", "MigrateVM").pyclass

MigrateVMResponseMsg = GED("urn:vim25", "MigrateVMResponse").pyclass

MigrateVM_TaskRequestMsg = GED("urn:vim25", "MigrateVM_Task").pyclass

MigrateVM_TaskResponseMsg = GED("urn:vim25", "MigrateVM_TaskResponse").pyclass

RelocateVMRequestMsg = GED("urn:vim25", "RelocateVM").pyclass

RelocateVMResponseMsg = GED("urn:vim25", "RelocateVMResponse").pyclass

RelocateVM_TaskRequestMsg = GED("urn:vim25", "RelocateVM_Task").pyclass

RelocateVM_TaskResponseMsg = GED("urn:vim25", "RelocateVM_TaskResponse").pyclass

CloneVMRequestMsg = GED("urn:vim25", "CloneVM").pyclass

CloneVMResponseMsg = GED("urn:vim25", "CloneVMResponse").pyclass

CloneVM_TaskRequestMsg = GED("urn:vim25", "CloneVM_Task").pyclass

CloneVM_TaskResponseMsg = GED("urn:vim25", "CloneVM_TaskResponse").pyclass

MarkAsTemplateRequestMsg = GED("urn:vim25", "MarkAsTemplate").pyclass

MarkAsTemplateResponseMsg = GED("urn:vim25", "MarkAsTemplateResponse").pyclass

MarkAsVirtualMachineRequestMsg = GED("urn:vim25", "MarkAsVirtualMachine").pyclass

MarkAsVirtualMachineResponseMsg = GED("urn:vim25", "MarkAsVirtualMachineResponse").pyclass

UnregisterVMRequestMsg = GED("urn:vim25", "UnregisterVM").pyclass

UnregisterVMResponseMsg = GED("urn:vim25", "UnregisterVMResponse").pyclass

ResetGuestInformationRequestMsg = GED("urn:vim25", "ResetGuestInformation").pyclass

ResetGuestInformationResponseMsg = GED("urn:vim25", "ResetGuestInformationResponse").pyclass

MountToolsInstallerRequestMsg = GED("urn:vim25", "MountToolsInstaller").pyclass

MountToolsInstallerResponseMsg = GED("urn:vim25", "MountToolsInstallerResponse").pyclass

UnmountToolsInstallerRequestMsg = GED("urn:vim25", "UnmountToolsInstaller").pyclass

UnmountToolsInstallerResponseMsg = GED("urn:vim25", "UnmountToolsInstallerResponse").pyclass

UpgradeToolsRequestMsg = GED("urn:vim25", "UpgradeTools").pyclass

UpgradeToolsResponseMsg = GED("urn:vim25", "UpgradeToolsResponse").pyclass

UpgradeTools_TaskRequestMsg = GED("urn:vim25", "UpgradeTools_Task").pyclass

UpgradeTools_TaskResponseMsg = GED("urn:vim25", "UpgradeTools_TaskResponse").pyclass

AcquireMksTicketRequestMsg = GED("urn:vim25", "AcquireMksTicket").pyclass

AcquireMksTicketResponseMsg = GED("urn:vim25", "AcquireMksTicketResponse").pyclass

SetScreenResolutionRequestMsg = GED("urn:vim25", "SetScreenResolution").pyclass

SetScreenResolutionResponseMsg = GED("urn:vim25", "SetScreenResolutionResponse").pyclass

DefragmentAllDisksRequestMsg = GED("urn:vim25", "DefragmentAllDisks").pyclass

DefragmentAllDisksResponseMsg = GED("urn:vim25", "DefragmentAllDisksResponse").pyclass

RemoveAlarmRequestMsg = GED("urn:vim25", "RemoveAlarm").pyclass

RemoveAlarmResponseMsg = GED("urn:vim25", "RemoveAlarmResponse").pyclass

ReconfigureAlarmRequestMsg = GED("urn:vim25", "ReconfigureAlarm").pyclass

ReconfigureAlarmResponseMsg = GED("urn:vim25", "ReconfigureAlarmResponse").pyclass

CreateAlarmRequestMsg = GED("urn:vim25", "CreateAlarm").pyclass

CreateAlarmResponseMsg = GED("urn:vim25", "CreateAlarmResponse").pyclass

GetAlarmRequestMsg = GED("urn:vim25", "GetAlarm").pyclass

GetAlarmResponseMsg = GED("urn:vim25", "GetAlarmResponse").pyclass

GetAlarmStateRequestMsg = GED("urn:vim25", "GetAlarmState").pyclass

GetAlarmStateResponseMsg = GED("urn:vim25", "GetAlarmStateResponse").pyclass

ReadNextEventsRequestMsg = GED("urn:vim25", "ReadNextEvents").pyclass

ReadNextEventsResponseMsg = GED("urn:vim25", "ReadNextEventsResponse").pyclass

ReadPreviousEventsRequestMsg = GED("urn:vim25", "ReadPreviousEvents").pyclass

ReadPreviousEventsResponseMsg = GED("urn:vim25", "ReadPreviousEventsResponse").pyclass

CreateCollectorForEventsRequestMsg = GED("urn:vim25", "CreateCollectorForEvents").pyclass

CreateCollectorForEventsResponseMsg = GED("urn:vim25", "CreateCollectorForEventsResponse").pyclass

LogUserEventRequestMsg = GED("urn:vim25", "LogUserEvent").pyclass

LogUserEventResponseMsg = GED("urn:vim25", "LogUserEventResponse").pyclass

QueryEventsRequestMsg = GED("urn:vim25", "QueryEvents").pyclass

QueryEventsResponseMsg = GED("urn:vim25", "QueryEventsResponse").pyclass

PostEventRequestMsg = GED("urn:vim25", "PostEvent").pyclass

PostEventResponseMsg = GED("urn:vim25", "PostEventResponse").pyclass

ReconfigureAutostartRequestMsg = GED("urn:vim25", "ReconfigureAutostart").pyclass

ReconfigureAutostartResponseMsg = GED("urn:vim25", "ReconfigureAutostartResponse").pyclass

AutoStartPowerOnRequestMsg = GED("urn:vim25", "AutoStartPowerOn").pyclass

AutoStartPowerOnResponseMsg = GED("urn:vim25", "AutoStartPowerOnResponse").pyclass

AutoStartPowerOffRequestMsg = GED("urn:vim25", "AutoStartPowerOff").pyclass

AutoStartPowerOffResponseMsg = GED("urn:vim25", "AutoStartPowerOffResponse").pyclass

QueryBootDevicesRequestMsg = GED("urn:vim25", "QueryBootDevices").pyclass

QueryBootDevicesResponseMsg = GED("urn:vim25", "QueryBootDevicesResponse").pyclass

UpdateBootDeviceRequestMsg = GED("urn:vim25", "UpdateBootDevice").pyclass

UpdateBootDeviceResponseMsg = GED("urn:vim25", "UpdateBootDeviceResponse").pyclass

EnableHyperThreadingRequestMsg = GED("urn:vim25", "EnableHyperThreading").pyclass

EnableHyperThreadingResponseMsg = GED("urn:vim25", "EnableHyperThreadingResponse").pyclass

DisableHyperThreadingRequestMsg = GED("urn:vim25", "DisableHyperThreading").pyclass

DisableHyperThreadingResponseMsg = GED("urn:vim25", "DisableHyperThreadingResponse").pyclass

SearchDatastoreRequestMsg = GED("urn:vim25", "SearchDatastore").pyclass

SearchDatastoreResponseMsg = GED("urn:vim25", "SearchDatastoreResponse").pyclass

SearchDatastore_TaskRequestMsg = GED("urn:vim25", "SearchDatastore_Task").pyclass

SearchDatastore_TaskResponseMsg = GED("urn:vim25", "SearchDatastore_TaskResponse").pyclass

SearchDatastoreSubFoldersRequestMsg = GED("urn:vim25", "SearchDatastoreSubFolders").pyclass

SearchDatastoreSubFoldersResponseMsg = GED("urn:vim25", "SearchDatastoreSubFoldersResponse").pyclass

SearchDatastoreSubFolders_TaskRequestMsg = GED("urn:vim25", "SearchDatastoreSubFolders_Task").pyclass

SearchDatastoreSubFolders_TaskResponseMsg = GED("urn:vim25", "SearchDatastoreSubFolders_TaskResponse").pyclass

DeleteFileRequestMsg = GED("urn:vim25", "DeleteFile").pyclass

DeleteFileResponseMsg = GED("urn:vim25", "DeleteFileResponse").pyclass

UpdateLocalSwapDatastoreRequestMsg = GED("urn:vim25", "UpdateLocalSwapDatastore").pyclass

UpdateLocalSwapDatastoreResponseMsg = GED("urn:vim25", "UpdateLocalSwapDatastoreResponse").pyclass

QueryAvailableDisksForVmfsRequestMsg = GED("urn:vim25", "QueryAvailableDisksForVmfs").pyclass

QueryAvailableDisksForVmfsResponseMsg = GED("urn:vim25", "QueryAvailableDisksForVmfsResponse").pyclass

QueryVmfsDatastoreCreateOptionsRequestMsg = GED("urn:vim25", "QueryVmfsDatastoreCreateOptions").pyclass

QueryVmfsDatastoreCreateOptionsResponseMsg = GED("urn:vim25", "QueryVmfsDatastoreCreateOptionsResponse").pyclass

CreateVmfsDatastoreRequestMsg = GED("urn:vim25", "CreateVmfsDatastore").pyclass

CreateVmfsDatastoreResponseMsg = GED("urn:vim25", "CreateVmfsDatastoreResponse").pyclass

QueryVmfsDatastoreExtendOptionsRequestMsg = GED("urn:vim25", "QueryVmfsDatastoreExtendOptions").pyclass

QueryVmfsDatastoreExtendOptionsResponseMsg = GED("urn:vim25", "QueryVmfsDatastoreExtendOptionsResponse").pyclass

ExtendVmfsDatastoreRequestMsg = GED("urn:vim25", "ExtendVmfsDatastore").pyclass

ExtendVmfsDatastoreResponseMsg = GED("urn:vim25", "ExtendVmfsDatastoreResponse").pyclass

CreateNasDatastoreRequestMsg = GED("urn:vim25", "CreateNasDatastore").pyclass

CreateNasDatastoreResponseMsg = GED("urn:vim25", "CreateNasDatastoreResponse").pyclass

CreateLocalDatastoreRequestMsg = GED("urn:vim25", "CreateLocalDatastore").pyclass

CreateLocalDatastoreResponseMsg = GED("urn:vim25", "CreateLocalDatastoreResponse").pyclass

RemoveDatastoreRequestMsg = GED("urn:vim25", "RemoveDatastore").pyclass

RemoveDatastoreResponseMsg = GED("urn:vim25", "RemoveDatastoreResponse").pyclass

ConfigureDatastorePrincipalRequestMsg = GED("urn:vim25", "ConfigureDatastorePrincipal").pyclass

ConfigureDatastorePrincipalResponseMsg = GED("urn:vim25", "ConfigureDatastorePrincipalResponse").pyclass

UpdateDateTimeConfigRequestMsg = GED("urn:vim25", "UpdateDateTimeConfig").pyclass

UpdateDateTimeConfigResponseMsg = GED("urn:vim25", "UpdateDateTimeConfigResponse").pyclass

QueryAvailableTimeZonesRequestMsg = GED("urn:vim25", "QueryAvailableTimeZones").pyclass

QueryAvailableTimeZonesResponseMsg = GED("urn:vim25", "QueryAvailableTimeZonesResponse").pyclass

QueryDateTimeRequestMsg = GED("urn:vim25", "QueryDateTime").pyclass

QueryDateTimeResponseMsg = GED("urn:vim25", "QueryDateTimeResponse").pyclass

UpdateDateTimeRequestMsg = GED("urn:vim25", "UpdateDateTime").pyclass

UpdateDateTimeResponseMsg = GED("urn:vim25", "UpdateDateTimeResponse").pyclass

RefreshDateTimeSystemRequestMsg = GED("urn:vim25", "RefreshDateTimeSystem").pyclass

RefreshDateTimeSystemResponseMsg = GED("urn:vim25", "RefreshDateTimeSystemResponse").pyclass

QueryAvailablePartitionRequestMsg = GED("urn:vim25", "QueryAvailablePartition").pyclass

QueryAvailablePartitionResponseMsg = GED("urn:vim25", "QueryAvailablePartitionResponse").pyclass

SelectActivePartitionRequestMsg = GED("urn:vim25", "SelectActivePartition").pyclass

SelectActivePartitionResponseMsg = GED("urn:vim25", "SelectActivePartitionResponse").pyclass

QueryPartitionCreateOptionsRequestMsg = GED("urn:vim25", "QueryPartitionCreateOptions").pyclass

QueryPartitionCreateOptionsResponseMsg = GED("urn:vim25", "QueryPartitionCreateOptionsResponse").pyclass

QueryPartitionCreateDescRequestMsg = GED("urn:vim25", "QueryPartitionCreateDesc").pyclass

QueryPartitionCreateDescResponseMsg = GED("urn:vim25", "QueryPartitionCreateDescResponse").pyclass

CreateDiagnosticPartitionRequestMsg = GED("urn:vim25", "CreateDiagnosticPartition").pyclass

CreateDiagnosticPartitionResponseMsg = GED("urn:vim25", "CreateDiagnosticPartitionResponse").pyclass

UpdateDefaultPolicyRequestMsg = GED("urn:vim25", "UpdateDefaultPolicy").pyclass

UpdateDefaultPolicyResponseMsg = GED("urn:vim25", "UpdateDefaultPolicyResponse").pyclass

EnableRulesetRequestMsg = GED("urn:vim25", "EnableRuleset").pyclass

EnableRulesetResponseMsg = GED("urn:vim25", "EnableRulesetResponse").pyclass

DisableRulesetRequestMsg = GED("urn:vim25", "DisableRuleset").pyclass

DisableRulesetResponseMsg = GED("urn:vim25", "DisableRulesetResponse").pyclass

RefreshFirewallRequestMsg = GED("urn:vim25", "RefreshFirewall").pyclass

RefreshFirewallResponseMsg = GED("urn:vim25", "RefreshFirewallResponse").pyclass

ResetFirmwareToFactoryDefaultsRequestMsg = GED("urn:vim25", "ResetFirmwareToFactoryDefaults").pyclass

ResetFirmwareToFactoryDefaultsResponseMsg = GED("urn:vim25", "ResetFirmwareToFactoryDefaultsResponse").pyclass

BackupFirmwareConfigurationRequestMsg = GED("urn:vim25", "BackupFirmwareConfiguration").pyclass

BackupFirmwareConfigurationResponseMsg = GED("urn:vim25", "BackupFirmwareConfigurationResponse").pyclass

QueryFirmwareConfigUploadURLRequestMsg = GED("urn:vim25", "QueryFirmwareConfigUploadURL").pyclass

QueryFirmwareConfigUploadURLResponseMsg = GED("urn:vim25", "QueryFirmwareConfigUploadURLResponse").pyclass

RestoreFirmwareConfigurationRequestMsg = GED("urn:vim25", "RestoreFirmwareConfiguration").pyclass

RestoreFirmwareConfigurationResponseMsg = GED("urn:vim25", "RestoreFirmwareConfigurationResponse").pyclass

RefreshHealthStatusSystemRequestMsg = GED("urn:vim25", "RefreshHealthStatusSystem").pyclass

RefreshHealthStatusSystemResponseMsg = GED("urn:vim25", "RefreshHealthStatusSystemResponse").pyclass

ResetSystemHealthInfoRequestMsg = GED("urn:vim25", "ResetSystemHealthInfo").pyclass

ResetSystemHealthInfoResponseMsg = GED("urn:vim25", "ResetSystemHealthInfoResponse").pyclass

CreateUserRequestMsg = GED("urn:vim25", "CreateUser").pyclass

CreateUserResponseMsg = GED("urn:vim25", "CreateUserResponse").pyclass

UpdateUserRequestMsg = GED("urn:vim25", "UpdateUser").pyclass

UpdateUserResponseMsg = GED("urn:vim25", "UpdateUserResponse").pyclass

CreateGroupRequestMsg = GED("urn:vim25", "CreateGroup").pyclass

CreateGroupResponseMsg = GED("urn:vim25", "CreateGroupResponse").pyclass

RemoveUserRequestMsg = GED("urn:vim25", "RemoveUser").pyclass

RemoveUserResponseMsg = GED("urn:vim25", "RemoveUserResponse").pyclass

RemoveGroupRequestMsg = GED("urn:vim25", "RemoveGroup").pyclass

RemoveGroupResponseMsg = GED("urn:vim25", "RemoveGroupResponse").pyclass

AssignUserToGroupRequestMsg = GED("urn:vim25", "AssignUserToGroup").pyclass

AssignUserToGroupResponseMsg = GED("urn:vim25", "AssignUserToGroupResponse").pyclass

UnassignUserFromGroupRequestMsg = GED("urn:vim25", "UnassignUserFromGroup").pyclass

UnassignUserFromGroupResponseMsg = GED("urn:vim25", "UnassignUserFromGroupResponse").pyclass

ReconfigureServiceConsoleReservationRequestMsg = GED("urn:vim25", "ReconfigureServiceConsoleReservation").pyclass

ReconfigureServiceConsoleReservationResponseMsg = GED("urn:vim25", "ReconfigureServiceConsoleReservationResponse").pyclass

ReconfigureVirtualMachineReservationRequestMsg = GED("urn:vim25", "ReconfigureVirtualMachineReservation").pyclass

ReconfigureVirtualMachineReservationResponseMsg = GED("urn:vim25", "ReconfigureVirtualMachineReservationResponse").pyclass

UpdateNetworkConfigRequestMsg = GED("urn:vim25", "UpdateNetworkConfig").pyclass

UpdateNetworkConfigResponseMsg = GED("urn:vim25", "UpdateNetworkConfigResponse").pyclass

UpdateDnsConfigRequestMsg = GED("urn:vim25", "UpdateDnsConfig").pyclass

UpdateDnsConfigResponseMsg = GED("urn:vim25", "UpdateDnsConfigResponse").pyclass

UpdateIpRouteConfigRequestMsg = GED("urn:vim25", "UpdateIpRouteConfig").pyclass

UpdateIpRouteConfigResponseMsg = GED("urn:vim25", "UpdateIpRouteConfigResponse").pyclass

UpdateConsoleIpRouteConfigRequestMsg = GED("urn:vim25", "UpdateConsoleIpRouteConfig").pyclass

UpdateConsoleIpRouteConfigResponseMsg = GED("urn:vim25", "UpdateConsoleIpRouteConfigResponse").pyclass

AddVirtualSwitchRequestMsg = GED("urn:vim25", "AddVirtualSwitch").pyclass

AddVirtualSwitchResponseMsg = GED("urn:vim25", "AddVirtualSwitchResponse").pyclass

RemoveVirtualSwitchRequestMsg = GED("urn:vim25", "RemoveVirtualSwitch").pyclass

RemoveVirtualSwitchResponseMsg = GED("urn:vim25", "RemoveVirtualSwitchResponse").pyclass

UpdateVirtualSwitchRequestMsg = GED("urn:vim25", "UpdateVirtualSwitch").pyclass

UpdateVirtualSwitchResponseMsg = GED("urn:vim25", "UpdateVirtualSwitchResponse").pyclass

AddPortGroupRequestMsg = GED("urn:vim25", "AddPortGroup").pyclass

AddPortGroupResponseMsg = GED("urn:vim25", "AddPortGroupResponse").pyclass

RemovePortGroupRequestMsg = GED("urn:vim25", "RemovePortGroup").pyclass

RemovePortGroupResponseMsg = GED("urn:vim25", "RemovePortGroupResponse").pyclass

UpdatePortGroupRequestMsg = GED("urn:vim25", "UpdatePortGroup").pyclass

UpdatePortGroupResponseMsg = GED("urn:vim25", "UpdatePortGroupResponse").pyclass

UpdatePhysicalNicLinkSpeedRequestMsg = GED("urn:vim25", "UpdatePhysicalNicLinkSpeed").pyclass

UpdatePhysicalNicLinkSpeedResponseMsg = GED("urn:vim25", "UpdatePhysicalNicLinkSpeedResponse").pyclass

QueryNetworkHintRequestMsg = GED("urn:vim25", "QueryNetworkHint").pyclass

QueryNetworkHintResponseMsg = GED("urn:vim25", "QueryNetworkHintResponse").pyclass

AddVirtualNicRequestMsg = GED("urn:vim25", "AddVirtualNic").pyclass

AddVirtualNicResponseMsg = GED("urn:vim25", "AddVirtualNicResponse").pyclass

RemoveVirtualNicRequestMsg = GED("urn:vim25", "RemoveVirtualNic").pyclass

RemoveVirtualNicResponseMsg = GED("urn:vim25", "RemoveVirtualNicResponse").pyclass

UpdateVirtualNicRequestMsg = GED("urn:vim25", "UpdateVirtualNic").pyclass

UpdateVirtualNicResponseMsg = GED("urn:vim25", "UpdateVirtualNicResponse").pyclass

AddServiceConsoleVirtualNicRequestMsg = GED("urn:vim25", "AddServiceConsoleVirtualNic").pyclass

AddServiceConsoleVirtualNicResponseMsg = GED("urn:vim25", "AddServiceConsoleVirtualNicResponse").pyclass

RemoveServiceConsoleVirtualNicRequestMsg = GED("urn:vim25", "RemoveServiceConsoleVirtualNic").pyclass

RemoveServiceConsoleVirtualNicResponseMsg = GED("urn:vim25", "RemoveServiceConsoleVirtualNicResponse").pyclass

UpdateServiceConsoleVirtualNicRequestMsg = GED("urn:vim25", "UpdateServiceConsoleVirtualNic").pyclass

UpdateServiceConsoleVirtualNicResponseMsg = GED("urn:vim25", "UpdateServiceConsoleVirtualNicResponse").pyclass

RestartServiceConsoleVirtualNicRequestMsg = GED("urn:vim25", "RestartServiceConsoleVirtualNic").pyclass

RestartServiceConsoleVirtualNicResponseMsg = GED("urn:vim25", "RestartServiceConsoleVirtualNicResponse").pyclass

RefreshNetworkSystemRequestMsg = GED("urn:vim25", "RefreshNetworkSystem").pyclass

RefreshNetworkSystemResponseMsg = GED("urn:vim25", "RefreshNetworkSystemResponse").pyclass

ScanHostPatchRequestMsg = GED("urn:vim25", "ScanHostPatch").pyclass

ScanHostPatchResponseMsg = GED("urn:vim25", "ScanHostPatchResponse").pyclass

ScanHostPatch_TaskRequestMsg = GED("urn:vim25", "ScanHostPatch_Task").pyclass

ScanHostPatch_TaskResponseMsg = GED("urn:vim25", "ScanHostPatch_TaskResponse").pyclass

InstallHostPatchRequestMsg = GED("urn:vim25", "InstallHostPatch").pyclass

InstallHostPatchResponseMsg = GED("urn:vim25", "InstallHostPatchResponse").pyclass

InstallHostPatch_TaskRequestMsg = GED("urn:vim25", "InstallHostPatch_Task").pyclass

InstallHostPatch_TaskResponseMsg = GED("urn:vim25", "InstallHostPatch_TaskResponse").pyclass

UpdateServicePolicyRequestMsg = GED("urn:vim25", "UpdateServicePolicy").pyclass

UpdateServicePolicyResponseMsg = GED("urn:vim25", "UpdateServicePolicyResponse").pyclass

StartServiceRequestMsg = GED("urn:vim25", "StartService").pyclass

StartServiceResponseMsg = GED("urn:vim25", "StartServiceResponse").pyclass

StopServiceRequestMsg = GED("urn:vim25", "StopService").pyclass

StopServiceResponseMsg = GED("urn:vim25", "StopServiceResponse").pyclass

RestartServiceRequestMsg = GED("urn:vim25", "RestartService").pyclass

RestartServiceResponseMsg = GED("urn:vim25", "RestartServiceResponse").pyclass

UninstallServiceRequestMsg = GED("urn:vim25", "UninstallService").pyclass

UninstallServiceResponseMsg = GED("urn:vim25", "UninstallServiceResponse").pyclass

RefreshServicesRequestMsg = GED("urn:vim25", "RefreshServices").pyclass

RefreshServicesResponseMsg = GED("urn:vim25", "RefreshServicesResponse").pyclass

ReconfigureSnmpAgentRequestMsg = GED("urn:vim25", "ReconfigureSnmpAgent").pyclass

ReconfigureSnmpAgentResponseMsg = GED("urn:vim25", "ReconfigureSnmpAgentResponse").pyclass

SendTestNotificationRequestMsg = GED("urn:vim25", "SendTestNotification").pyclass

SendTestNotificationResponseMsg = GED("urn:vim25", "SendTestNotificationResponse").pyclass

RetrieveDiskPartitionInfoRequestMsg = GED("urn:vim25", "RetrieveDiskPartitionInfo").pyclass

RetrieveDiskPartitionInfoResponseMsg = GED("urn:vim25", "RetrieveDiskPartitionInfoResponse").pyclass

ComputeDiskPartitionInfoRequestMsg = GED("urn:vim25", "ComputeDiskPartitionInfo").pyclass

ComputeDiskPartitionInfoResponseMsg = GED("urn:vim25", "ComputeDiskPartitionInfoResponse").pyclass

UpdateDiskPartitionsRequestMsg = GED("urn:vim25", "UpdateDiskPartitions").pyclass

UpdateDiskPartitionsResponseMsg = GED("urn:vim25", "UpdateDiskPartitionsResponse").pyclass

FormatVmfsRequestMsg = GED("urn:vim25", "FormatVmfs").pyclass

FormatVmfsResponseMsg = GED("urn:vim25", "FormatVmfsResponse").pyclass

RescanVmfsRequestMsg = GED("urn:vim25", "RescanVmfs").pyclass

RescanVmfsResponseMsg = GED("urn:vim25", "RescanVmfsResponse").pyclass

AttachVmfsExtentRequestMsg = GED("urn:vim25", "AttachVmfsExtent").pyclass

AttachVmfsExtentResponseMsg = GED("urn:vim25", "AttachVmfsExtentResponse").pyclass

UpgradeVmfsRequestMsg = GED("urn:vim25", "UpgradeVmfs").pyclass

UpgradeVmfsResponseMsg = GED("urn:vim25", "UpgradeVmfsResponse").pyclass

UpgradeVmLayoutRequestMsg = GED("urn:vim25", "UpgradeVmLayout").pyclass

UpgradeVmLayoutResponseMsg = GED("urn:vim25", "UpgradeVmLayoutResponse").pyclass

RescanHbaRequestMsg = GED("urn:vim25", "RescanHba").pyclass

RescanHbaResponseMsg = GED("urn:vim25", "RescanHbaResponse").pyclass

RescanAllHbaRequestMsg = GED("urn:vim25", "RescanAllHba").pyclass

RescanAllHbaResponseMsg = GED("urn:vim25", "RescanAllHbaResponse").pyclass

UpdateSoftwareInternetScsiEnabledRequestMsg = GED("urn:vim25", "UpdateSoftwareInternetScsiEnabled").pyclass

UpdateSoftwareInternetScsiEnabledResponseMsg = GED("urn:vim25", "UpdateSoftwareInternetScsiEnabledResponse").pyclass

UpdateInternetScsiDiscoveryPropertiesRequestMsg = GED("urn:vim25", "UpdateInternetScsiDiscoveryProperties").pyclass

UpdateInternetScsiDiscoveryPropertiesResponseMsg = GED("urn:vim25", "UpdateInternetScsiDiscoveryPropertiesResponse").pyclass

UpdateInternetScsiAuthenticationPropertiesRequestMsg = GED("urn:vim25", "UpdateInternetScsiAuthenticationProperties").pyclass

UpdateInternetScsiAuthenticationPropertiesResponseMsg = GED("urn:vim25", "UpdateInternetScsiAuthenticationPropertiesResponse").pyclass

UpdateInternetScsiIPPropertiesRequestMsg = GED("urn:vim25", "UpdateInternetScsiIPProperties").pyclass

UpdateInternetScsiIPPropertiesResponseMsg = GED("urn:vim25", "UpdateInternetScsiIPPropertiesResponse").pyclass

UpdateInternetScsiNameRequestMsg = GED("urn:vim25", "UpdateInternetScsiName").pyclass

UpdateInternetScsiNameResponseMsg = GED("urn:vim25", "UpdateInternetScsiNameResponse").pyclass

UpdateInternetScsiAliasRequestMsg = GED("urn:vim25", "UpdateInternetScsiAlias").pyclass

UpdateInternetScsiAliasResponseMsg = GED("urn:vim25", "UpdateInternetScsiAliasResponse").pyclass

AddInternetScsiSendTargetsRequestMsg = GED("urn:vim25", "AddInternetScsiSendTargets").pyclass

AddInternetScsiSendTargetsResponseMsg = GED("urn:vim25", "AddInternetScsiSendTargetsResponse").pyclass

RemoveInternetScsiSendTargetsRequestMsg = GED("urn:vim25", "RemoveInternetScsiSendTargets").pyclass

RemoveInternetScsiSendTargetsResponseMsg = GED("urn:vim25", "RemoveInternetScsiSendTargetsResponse").pyclass

AddInternetScsiStaticTargetsRequestMsg = GED("urn:vim25", "AddInternetScsiStaticTargets").pyclass

AddInternetScsiStaticTargetsResponseMsg = GED("urn:vim25", "AddInternetScsiStaticTargetsResponse").pyclass

RemoveInternetScsiStaticTargetsRequestMsg = GED("urn:vim25", "RemoveInternetScsiStaticTargets").pyclass

RemoveInternetScsiStaticTargetsResponseMsg = GED("urn:vim25", "RemoveInternetScsiStaticTargetsResponse").pyclass

EnableMultipathPathRequestMsg = GED("urn:vim25", "EnableMultipathPath").pyclass

EnableMultipathPathResponseMsg = GED("urn:vim25", "EnableMultipathPathResponse").pyclass

DisableMultipathPathRequestMsg = GED("urn:vim25", "DisableMultipathPath").pyclass

DisableMultipathPathResponseMsg = GED("urn:vim25", "DisableMultipathPathResponse").pyclass

SetMultipathLunPolicyRequestMsg = GED("urn:vim25", "SetMultipathLunPolicy").pyclass

SetMultipathLunPolicyResponseMsg = GED("urn:vim25", "SetMultipathLunPolicyResponse").pyclass

RefreshStorageSystemRequestMsg = GED("urn:vim25", "RefreshStorageSystem").pyclass

RefreshStorageSystemResponseMsg = GED("urn:vim25", "RefreshStorageSystemResponse").pyclass

UpdateIpConfigRequestMsg = GED("urn:vim25", "UpdateIpConfig").pyclass

UpdateIpConfigResponseMsg = GED("urn:vim25", "UpdateIpConfigResponse").pyclass

SelectVnicRequestMsg = GED("urn:vim25", "SelectVnic").pyclass

SelectVnicResponseMsg = GED("urn:vim25", "SelectVnicResponse").pyclass

DeselectVnicRequestMsg = GED("urn:vim25", "DeselectVnic").pyclass

DeselectVnicResponseMsg = GED("urn:vim25", "DeselectVnicResponse").pyclass

QueryOptionsRequestMsg = GED("urn:vim25", "QueryOptions").pyclass

QueryOptionsResponseMsg = GED("urn:vim25", "QueryOptionsResponse").pyclass

UpdateOptionsRequestMsg = GED("urn:vim25", "UpdateOptions").pyclass

UpdateOptionsResponseMsg = GED("urn:vim25", "UpdateOptionsResponse").pyclass

RemoveScheduledTaskRequestMsg = GED("urn:vim25", "RemoveScheduledTask").pyclass

RemoveScheduledTaskResponseMsg = GED("urn:vim25", "RemoveScheduledTaskResponse").pyclass

ReconfigureScheduledTaskRequestMsg = GED("urn:vim25", "ReconfigureScheduledTask").pyclass

ReconfigureScheduledTaskResponseMsg = GED("urn:vim25", "ReconfigureScheduledTaskResponse").pyclass

RunScheduledTaskRequestMsg = GED("urn:vim25", "RunScheduledTask").pyclass

RunScheduledTaskResponseMsg = GED("urn:vim25", "RunScheduledTaskResponse").pyclass

CreateScheduledTaskRequestMsg = GED("urn:vim25", "CreateScheduledTask").pyclass

CreateScheduledTaskResponseMsg = GED("urn:vim25", "CreateScheduledTaskResponse").pyclass

RetrieveEntityScheduledTaskRequestMsg = GED("urn:vim25", "RetrieveEntityScheduledTask").pyclass

RetrieveEntityScheduledTaskResponseMsg = GED("urn:vim25", "RetrieveEntityScheduledTaskResponse").pyclass

OpenInventoryViewFolderRequestMsg = GED("urn:vim25", "OpenInventoryViewFolder").pyclass

OpenInventoryViewFolderResponseMsg = GED("urn:vim25", "OpenInventoryViewFolderResponse").pyclass

CloseInventoryViewFolderRequestMsg = GED("urn:vim25", "CloseInventoryViewFolder").pyclass

CloseInventoryViewFolderResponseMsg = GED("urn:vim25", "CloseInventoryViewFolderResponse").pyclass

ModifyListViewRequestMsg = GED("urn:vim25", "ModifyListView").pyclass

ModifyListViewResponseMsg = GED("urn:vim25", "ModifyListViewResponse").pyclass

ResetListViewRequestMsg = GED("urn:vim25", "ResetListView").pyclass

ResetListViewResponseMsg = GED("urn:vim25", "ResetListViewResponse").pyclass

ResetListViewFromViewRequestMsg = GED("urn:vim25", "ResetListViewFromView").pyclass

ResetListViewFromViewResponseMsg = GED("urn:vim25", "ResetListViewFromViewResponse").pyclass

DestroyViewRequestMsg = GED("urn:vim25", "DestroyView").pyclass

DestroyViewResponseMsg = GED("urn:vim25", "DestroyViewResponse").pyclass

CreateInventoryViewRequestMsg = GED("urn:vim25", "CreateInventoryView").pyclass

CreateInventoryViewResponseMsg = GED("urn:vim25", "CreateInventoryViewResponse").pyclass

CreateContainerViewRequestMsg = GED("urn:vim25", "CreateContainerView").pyclass

CreateContainerViewResponseMsg = GED("urn:vim25", "CreateContainerViewResponse").pyclass

CreateListViewRequestMsg = GED("urn:vim25", "CreateListView").pyclass

CreateListViewResponseMsg = GED("urn:vim25", "CreateListViewResponse").pyclass

CreateListViewFromViewRequestMsg = GED("urn:vim25", "CreateListViewFromView").pyclass

CreateListViewFromViewResponseMsg = GED("urn:vim25", "CreateListViewFromViewResponse").pyclass

RevertToSnapshotRequestMsg = GED("urn:vim25", "RevertToSnapshot").pyclass

RevertToSnapshotResponseMsg = GED("urn:vim25", "RevertToSnapshotResponse").pyclass

RevertToSnapshot_TaskRequestMsg = GED("urn:vim25", "RevertToSnapshot_Task").pyclass

RevertToSnapshot_TaskResponseMsg = GED("urn:vim25", "RevertToSnapshot_TaskResponse").pyclass

RemoveSnapshotRequestMsg = GED("urn:vim25", "RemoveSnapshot").pyclass

RemoveSnapshotResponseMsg = GED("urn:vim25", "RemoveSnapshotResponse").pyclass

RemoveSnapshot_TaskRequestMsg = GED("urn:vim25", "RemoveSnapshot_Task").pyclass

RemoveSnapshot_TaskResponseMsg = GED("urn:vim25", "RemoveSnapshot_TaskResponse").pyclass

RenameSnapshotRequestMsg = GED("urn:vim25", "RenameSnapshot").pyclass

RenameSnapshotResponseMsg = GED("urn:vim25", "RenameSnapshotResponse").pyclass
