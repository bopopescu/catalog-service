#!/usr/bin/env python

#
# Generated  by generateDS.py.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class troveChangeType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('href', 'xsd:string', 0),
        MemberSpec_('id', 'xsd:string', 0),
        MemberSpec_('name', 'xsd:token', 0),
        MemberSpec_('versionChange', 'simpleChangeType', 0),
        MemberSpec_('flavorChange', 'simpleChangeType', 0),
        MemberSpec_('buildRequirementsChange', 'buildReqsChangeType', 0),
        MemberSpec_('troveAddition', 'troveSpecType', 1),
        MemberSpec_('troveRemoval', 'troveSpecType', 1),
        MemberSpec_('troveChange', 'troveChangeType', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, href=None, id=None, name=None, versionChange=None, flavorChange=None, buildRequirementsChange=None, troveAddition=None, troveRemoval=None, troveChange=None):
        self.href = _cast(None, href)
        self.id = _cast(None, id)
        self.name = name
        self.versionChange = versionChange
        self.flavorChange = flavorChange
        self.buildRequirementsChange = buildRequirementsChange
        if troveAddition is None:
            self.troveAddition = []
        else:
            self.troveAddition = troveAddition
        if troveRemoval is None:
            self.troveRemoval = []
        else:
            self.troveRemoval = troveRemoval
        if troveChange is None:
            self.troveChange = []
        else:
            self.troveChange = troveChange
    def factory(*args_, **kwargs_):
        if troveChangeType.subclass:
            return troveChangeType.subclass(*args_, **kwargs_)
        else:
            return troveChangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_versionChange(self): return self.versionChange
    def set_versionChange(self, versionChange): self.versionChange = versionChange
    def get_flavorChange(self): return self.flavorChange
    def set_flavorChange(self, flavorChange): self.flavorChange = flavorChange
    def get_buildRequirementsChange(self): return self.buildRequirementsChange
    def set_buildRequirementsChange(self, buildRequirementsChange): self.buildRequirementsChange = buildRequirementsChange
    def get_troveAddition(self): return self.troveAddition
    def set_troveAddition(self, troveAddition): self.troveAddition = troveAddition
    def add_troveAddition(self, value): self.troveAddition.append(value)
    def insert_troveAddition(self, index, value): self.troveAddition[index] = value
    def get_troveRemoval(self): return self.troveRemoval
    def set_troveRemoval(self, troveRemoval): self.troveRemoval = troveRemoval
    def add_troveRemoval(self, value): self.troveRemoval.append(value)
    def insert_troveRemoval(self, index, value): self.troveRemoval[index] = value
    def get_troveChange(self): return self.troveChange
    def set_troveChange(self, troveChange): self.troveChange = troveChange
    def add_troveChange(self, value): self.troveChange.append(value)
    def insert_troveChange(self, index, value): self.troveChange[index] = value
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='cny:', name_='troveChangeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='troveChangeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='cny:', name_='troveChangeType'):
        if self.href is not None:
            outfile.write(' href=%s' % (self.format_string(quote_attrib(self.href).encode(ExternalEncoding), input_name='href'), ))
        if self.id is not None:
            outfile.write(' id=%s' % (self.format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='cny:', name_='troveChangeType'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.versionChange:
            self.versionChange.export(outfile, level, namespace_, name_='versionChange')
        if self.flavorChange:
            self.flavorChange.export(outfile, level, namespace_, name_='flavorChange')
        if self.buildRequirementsChange:
            self.buildRequirementsChange.export(outfile, level, namespace_, name_='buildRequirementsChange')
        for troveAddition_ in self.troveAddition:
            troveAddition_.export(outfile, level, namespace_, name_='troveAddition')
        for troveRemoval_ in self.troveRemoval:
            troveRemoval_.export(outfile, level, namespace_, name_='troveRemoval')
        for troveChange_ in self.troveChange:
            troveChange_.export(outfile, level, namespace_, name_='troveChange')
    def hasContent_(self):
        if (
            self.name is not None or
            self.versionChange is not None or
            self.flavorChange is not None or
            self.buildRequirementsChange is not None or
            self.troveAddition or
            self.troveRemoval or
            self.troveChange
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='troveChangeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.href is not None:
            showIndent(outfile, level)
            outfile.write('href = "%s",\n' % (self.href,))
        if self.id is not None:
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.versionChange is not None:
            showIndent(outfile, level)
            outfile.write('versionChange=model_.simpleChangeType(\n')
            self.versionChange.exportLiteral(outfile, level, name_='versionChange')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.flavorChange is not None:
            showIndent(outfile, level)
            outfile.write('flavorChange=model_.simpleChangeType(\n')
            self.flavorChange.exportLiteral(outfile, level, name_='flavorChange')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.buildRequirementsChange is not None:
            showIndent(outfile, level)
            outfile.write('buildRequirementsChange=model_.buildReqsChangeType(\n')
            self.buildRequirementsChange.exportLiteral(outfile, level, name_='buildRequirementsChange')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('troveAddition=[\n')
        level += 1
        for troveAddition_ in self.troveAddition:
            showIndent(outfile, level)
            outfile.write('model_.troveSpecType(\n')
            troveAddition_.exportLiteral(outfile, level, name_='troveSpecType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('troveRemoval=[\n')
        level += 1
        for troveRemoval_ in self.troveRemoval:
            showIndent(outfile, level)
            outfile.write('model_.troveSpecType(\n')
            troveRemoval_.exportLiteral(outfile, level, name_='troveSpecType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('troveChange=[\n')
        level += 1
        for troveChange_ in self.troveChange:
            showIndent(outfile, level)
            outfile.write('model_.troveChangeType(\n')
            troveChange_.exportLiteral(outfile, level, name_='troveChangeType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('href'):
            self.href = attrs.get('href').value
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            name_ = ' '.join(name_.split())
            self.name = name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'versionChange':
            obj_ = simpleChangeType.factory()
            obj_.build(child_)
            self.set_versionChange(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'flavorChange':
            obj_ = simpleChangeType.factory()
            obj_.build(child_)
            self.set_flavorChange(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'buildRequirementsChange':
            obj_ = buildReqsChangeType.factory()
            obj_.build(child_)
            self.set_buildRequirementsChange(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'troveAddition':
            obj_ = troveSpecType.factory()
            obj_.build(child_)
            self.troveAddition.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'troveRemoval':
            obj_ = troveSpecType.factory()
            obj_.build(child_)
            self.troveRemoval.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'troveChange':
            obj_ = troveChangeType.factory()
            obj_.build(child_)
            self.troveChange.append(obj_)
# end class troveChangeType


class troveUnaryOperationType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if troveUnaryOperationType.subclass:
            return troveUnaryOperationType.subclass(*args_, **kwargs_)
        else:
            return troveUnaryOperationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='cny:', name_='troveUnaryOperationType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='troveUnaryOperationType')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='cny:', name_='troveUnaryOperationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='cny:', name_='troveUnaryOperationType'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='troveUnaryOperationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class troveUnaryOperationType


class troveSpecType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('name', 'xsd:token', 0),
        MemberSpec_('version', 'xsd:string', 0),
        MemberSpec_('flavor', 'xsd:string', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, name=None, version=None, flavor=None):
        self.name = name
        self.version = version
        self.flavor = flavor
    def factory(*args_, **kwargs_):
        if troveSpecType.subclass:
            return troveSpecType.subclass(*args_, **kwargs_)
        else:
            return troveSpecType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_flavor(self): return self.flavor
    def set_flavor(self, flavor): self.flavor = flavor
    def export(self, outfile, level, namespace_='cny:', name_='troveSpecType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='troveSpecType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='cny:', name_='troveSpecType'):
        pass
    def exportChildren(self, outfile, level, namespace_='cny:', name_='troveSpecType'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('<%sversion>%s</%sversion>\n' % (namespace_, self.format_string(quote_xml(self.version).encode(ExternalEncoding), input_name='version'), namespace_))
        if self.flavor is not None:
            showIndent(outfile, level)
            outfile.write('<%sflavor>%s</%sflavor>\n' % (namespace_, self.format_string(quote_xml(self.flavor).encode(ExternalEncoding), input_name='flavor'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.version is not None or
            self.flavor is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='troveSpecType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version=%s,\n' % quote_python(self.version).encode(ExternalEncoding))
        if self.flavor is not None:
            showIndent(outfile, level)
            outfile.write('flavor=%s,\n' % quote_python(self.flavor).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            name_ = ' '.join(name_.split())
            self.name = name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'version':
            version_ = ''
            for text__content_ in child_.childNodes:
                version_ += text__content_.nodeValue
            self.version = version_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'flavor':
            flavor_ = ''
            for text__content_ in child_.childNodes:
                flavor_ += text__content_.nodeValue
            self.flavor = flavor_
# end class troveSpecType


class simpleChangeType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('fromxx', 'xsd:string', 0),
        MemberSpec_('to', 'xsd:string', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, fromxx=None, to=None):
        self.fromxx = fromxx
        self.to = to
    def factory(*args_, **kwargs_):
        if simpleChangeType.subclass:
            return simpleChangeType.subclass(*args_, **kwargs_)
        else:
            return simpleChangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_from(self): return self.fromxx
    def set_from(self, fromxx): self.fromxx = fromxx
    def get_to(self): return self.to
    def set_to(self, to): self.to = to
    def export(self, outfile, level, namespace_='cny:', name_='simpleChangeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='simpleChangeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='cny:', name_='simpleChangeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='cny:', name_='simpleChangeType'):
        if self.fromxx is not None:
            showIndent(outfile, level)
            outfile.write('<%sfrom>%s</%sfrom>\n' % (namespace_, self.format_string(quote_xml(self.fromxx).encode(ExternalEncoding), input_name='from'), namespace_))
        if self.to is not None:
            showIndent(outfile, level)
            outfile.write('<%sto>%s</%sto>\n' % (namespace_, self.format_string(quote_xml(self.to).encode(ExternalEncoding), input_name='to'), namespace_))
    def hasContent_(self):
        if (
            self.fromxx is not None or
            self.to is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='simpleChangeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.fromxx is not None:
            showIndent(outfile, level)
            outfile.write('fromxx=%s,\n' % quote_python(self.fromxx).encode(ExternalEncoding))
        if self.to is not None:
            showIndent(outfile, level)
            outfile.write('to=%s,\n' % quote_python(self.to).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'from':
            from_ = ''
            for text__content_ in child_.childNodes:
                from_ += text__content_.nodeValue
            self.fromxx = from_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'to':
            to_ = ''
            for text__content_ in child_.childNodes:
                to_ += text__content_.nodeValue
            self.to = to_
# end class simpleChangeType


class buildReqsChangeType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('addition', 'troveSpecType', 1),
        MemberSpec_('removal', 'troveSpecType', 1),
        MemberSpec_('change', 'simpleTroveChangeType', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, addition=None, removal=None, change=None):
        if addition is None:
            self.addition = []
        else:
            self.addition = addition
        if removal is None:
            self.removal = []
        else:
            self.removal = removal
        if change is None:
            self.change = []
        else:
            self.change = change
    def factory(*args_, **kwargs_):
        if buildReqsChangeType.subclass:
            return buildReqsChangeType.subclass(*args_, **kwargs_)
        else:
            return buildReqsChangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_addition(self): return self.addition
    def set_addition(self, addition): self.addition = addition
    def add_addition(self, value): self.addition.append(value)
    def insert_addition(self, index, value): self.addition[index] = value
    def get_removal(self): return self.removal
    def set_removal(self, removal): self.removal = removal
    def add_removal(self, value): self.removal.append(value)
    def insert_removal(self, index, value): self.removal[index] = value
    def get_change(self): return self.change
    def set_change(self, change): self.change = change
    def add_change(self, value): self.change.append(value)
    def insert_change(self, index, value): self.change[index] = value
    def export(self, outfile, level, namespace_='cny:', name_='buildReqsChangeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='buildReqsChangeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='cny:', name_='buildReqsChangeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='cny:', name_='buildReqsChangeType'):
        for addition_ in self.addition:
            addition_.export(outfile, level, namespace_, name_='addition')
        for removal_ in self.removal:
            removal_.export(outfile, level, namespace_, name_='removal')
        for change_ in self.change:
            change_.export(outfile, level, namespace_, name_='change')
    def hasContent_(self):
        if (
            self.addition or
            self.removal or
            self.change
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='buildReqsChangeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('addition=[\n')
        level += 1
        for addition_ in self.addition:
            showIndent(outfile, level)
            outfile.write('model_.troveSpecType(\n')
            addition_.exportLiteral(outfile, level, name_='troveSpecType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('removal=[\n')
        level += 1
        for removal_ in self.removal:
            showIndent(outfile, level)
            outfile.write('model_.troveSpecType(\n')
            removal_.exportLiteral(outfile, level, name_='troveSpecType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('change=[\n')
        level += 1
        for change_ in self.change:
            showIndent(outfile, level)
            outfile.write('model_.simpleTroveChangeType(\n')
            change_.exportLiteral(outfile, level, name_='simpleTroveChangeType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'addition':
            obj_ = troveSpecType.factory()
            obj_.build(child_)
            self.addition.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'removal':
            obj_ = troveSpecType.factory()
            obj_.build(child_)
            self.removal.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'change':
            obj_ = simpleTroveChangeType.factory()
            obj_.build(child_)
            self.change.append(obj_)
# end class buildReqsChangeType


class simpleTroveChangeType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('name', 'xsd:token', 0),
        MemberSpec_('versionChange', 'simpleChangeType', 0),
        MemberSpec_('flavorChange', 'simpleChangeType', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, name=None, versionChange=None, flavorChange=None):
        self.name = name
        self.versionChange = versionChange
        self.flavorChange = flavorChange
    def factory(*args_, **kwargs_):
        if simpleTroveChangeType.subclass:
            return simpleTroveChangeType.subclass(*args_, **kwargs_)
        else:
            return simpleTroveChangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_versionChange(self): return self.versionChange
    def set_versionChange(self, versionChange): self.versionChange = versionChange
    def get_flavorChange(self): return self.flavorChange
    def set_flavorChange(self, flavorChange): self.flavorChange = flavorChange
    def export(self, outfile, level, namespace_='cny:', name_='simpleTroveChangeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='simpleTroveChangeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='cny:', name_='simpleTroveChangeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='cny:', name_='simpleTroveChangeType'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.versionChange:
            self.versionChange.export(outfile, level, namespace_, name_='versionChange')
        if self.flavorChange:
            self.flavorChange.export(outfile, level, namespace_, name_='flavorChange')
    def hasContent_(self):
        if (
            self.name is not None or
            self.versionChange is not None or
            self.flavorChange is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='simpleTroveChangeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.versionChange is not None:
            showIndent(outfile, level)
            outfile.write('versionChange=model_.simpleChangeType(\n')
            self.versionChange.exportLiteral(outfile, level, name_='versionChange')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.flavorChange is not None:
            showIndent(outfile, level)
            outfile.write('flavorChange=model_.simpleChangeType(\n')
            self.flavorChange.exportLiteral(outfile, level, name_='flavorChange')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            name_ = ' '.join(name_.split())
            self.name = name_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'versionChange':
            obj_ = simpleChangeType.factory()
            obj_.build(child_)
            self.set_versionChange(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'flavorChange':
            obj_ = simpleChangeType.factory()
            obj_.build(child_)
            self.set_flavorChange(obj_)
# end class simpleTroveChangeType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = troveChangeType.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="troveChange", 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = troveChangeType.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="troveChange",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = troveChangeType.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('#from generateds_trove_diff import *\n\n')
##     sys.stdout.write('import generateds_trove_diff as model_\n\n')
##     sys.stdout.write('rootObj = model_.troveChange(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_="troveChange")
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

